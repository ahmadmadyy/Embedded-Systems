
Nasr62_avr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000004f2  00000566  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000566  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000098  00000000  00000000  00000595  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000169e  00000000  00000000  0000062d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000086a  00000000  00000000  00001ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000696  00000000  00000000  00002535  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000011c  00000000  00000000  00002bcc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001ff  00000000  00000000  00002ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000598  00000000  00000000  00002ee7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000080  00000000  00000000  0000347f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000004d6  000004d6  0000054a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003500  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.KP_init 00000072  00000398  00000398  0000040c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.KP_GetKey 000000b0  00000264  00000264  000002d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .data.KP_Array 00000010  00800060  000004da  0000054e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 16 .data.ROW_Pin_ARRAY 00000004  00800070  000004ea  0000055e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 17 .data.COL_Pin_ARRAY 00000004  00800074  000004ee  00000562  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 18 .text.SEVSEG_init 0000003e  00000464  00000464  000004d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.SEVSEG_Display 00000084  00000314  00000314  00000388  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.main    00000016  000004c0  000004c0  00000534  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.DIO_SetPinDir 000000da  000000b0  000000b0  00000124  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.DIO_SetPinValue 000000da  0000018a  0000018a  000001fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.DIO_GetPinValue 0000005a  0000040a  0000040a  0000047e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.DIO_SetInputPullUp 0000001e  000004a2  000004a2  00000516  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
   8:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
   c:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
  10:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
  14:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
  18:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
  1c:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
  20:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
  24:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
  28:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
  2c:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
  30:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
  34:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
  38:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
  3c:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
  40:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
  44:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
  48:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
  4c:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
  50:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 78       	andi	r16, 0x80	; 128
  58:	00 04       	cpc	r0, r0
  5a:	da 00       	.word	0x00da	; ????

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf e5       	ldi	r28, 0x5F	; 95
  62:	d8 e0       	ldi	r29, 0x08	; 8
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	e4 e5       	ldi	r30, 0x54	; 84
  6a:	f0 e0       	ldi	r31, 0x00	; 0
  6c:	40 e0       	ldi	r20, 0x00	; 0
  6e:	17 c0       	rjmp	.+46     	; 0x9e <__do_clear_bss+0x8>
  70:	b5 91       	lpm	r27, Z+
  72:	a5 91       	lpm	r26, Z+
  74:	35 91       	lpm	r19, Z+
  76:	25 91       	lpm	r18, Z+
  78:	05 91       	lpm	r16, Z+
  7a:	07 fd       	sbrc	r16, 7
  7c:	0c c0       	rjmp	.+24     	; 0x96 <__do_clear_bss>
  7e:	95 91       	lpm	r25, Z+
  80:	85 91       	lpm	r24, Z+
  82:	ef 01       	movw	r28, r30
  84:	f9 2f       	mov	r31, r25
  86:	e8 2f       	mov	r30, r24
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a2 17       	cp	r26, r18
  8e:	b3 07       	cpc	r27, r19
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0x20>
  92:	fe 01       	movw	r30, r28
  94:	04 c0       	rjmp	.+8      	; 0x9e <__do_clear_bss+0x8>

00000096 <__do_clear_bss>:
  96:	1d 92       	st	X+, r1
  98:	a2 17       	cp	r26, r18
  9a:	b3 07       	cpc	r27, r19
  9c:	e1 f7       	brne	.-8      	; 0x96 <__do_clear_bss>
  9e:	eb 35       	cpi	r30, 0x5B	; 91
  a0:	f4 07       	cpc	r31, r20
  a2:	31 f7       	brne	.-52     	; 0x70 <__do_copy_data+0x8>
  a4:	0e 94 60 02 	call	0x4c0	; 0x4c0 <main>
  a8:	0c 94 56 00 	jmp	0xac	; 0xac <_exit>

000000ac <_exit>:
  ac:	f8 94       	cli

000000ae <__stop_program>:
  ae:	ff cf       	rjmp	.-2      	; 0xae <__stop_program>

Disassembly of section .text:

000004d6 <__bad_interrupt>:
 4d6:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.KP_init:

00000398 <KP_init>:
{'7','8','9','C' },
{'*','0','#','D' } };

void KP_init(){
	
	DIO_SetPinDir(COL_PORT,COL_0_Pin,OUTPUT);
 398:	43 e0       	ldi	r20, 0x03	; 3
 39a:	64 e0       	ldi	r22, 0x04	; 4
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	0e 94 58 00 	call	0xb0	; 0xb0 <__data_load_end>
	DIO_SetPinDir(COL_PORT,COL_1_Pin,OUTPUT);
 3a2:	43 e0       	ldi	r20, 0x03	; 3
 3a4:	65 e0       	ldi	r22, 0x05	; 5
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	0e 94 58 00 	call	0xb0	; 0xb0 <__data_load_end>
	DIO_SetPinDir(COL_PORT,COL_2_Pin,OUTPUT);
 3ac:	43 e0       	ldi	r20, 0x03	; 3
 3ae:	66 e0       	ldi	r22, 0x06	; 6
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	0e 94 58 00 	call	0xb0	; 0xb0 <__data_load_end>
	DIO_SetPinDir(COL_PORT,COL_3_Pin,OUTPUT);
 3b6:	43 e0       	ldi	r20, 0x03	; 3
 3b8:	67 e0       	ldi	r22, 0x07	; 7
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	0e 94 58 00 	call	0xb0	; 0xb0 <__data_load_end>
	
	DIO_SetPinValue(COL_PORT,COL_0_Pin,HIGH);
 3c0:	41 e0       	ldi	r20, 0x01	; 1
 3c2:	64 e0       	ldi	r22, 0x04	; 4
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_SetPinValue>
	DIO_SetPinValue(COL_PORT,COL_1_Pin,HIGH);
 3ca:	41 e0       	ldi	r20, 0x01	; 1
 3cc:	65 e0       	ldi	r22, 0x05	; 5
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_SetPinValue>
	DIO_SetPinValue(COL_PORT,COL_2_Pin,HIGH);
 3d4:	41 e0       	ldi	r20, 0x01	; 1
 3d6:	66 e0       	ldi	r22, 0x06	; 6
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_SetPinValue>
	DIO_SetPinValue(COL_PORT,COL_3_Pin,HIGH);
 3de:	41 e0       	ldi	r20, 0x01	; 1
 3e0:	67 e0       	ldi	r22, 0x07	; 7
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_SetPinValue>
	
	
	DIO_SetInputPullUp(ROW_PORT,ROW_0_Pin);
 3e8:	63 e0       	ldi	r22, 0x03	; 3
 3ea:	82 e0       	ldi	r24, 0x02	; 2
 3ec:	0e 94 51 02 	call	0x4a2	; 0x4a2 <DIO_SetInputPullUp>
	DIO_SetInputPullUp(ROW_PORT,ROW_1_Pin);
 3f0:	64 e0       	ldi	r22, 0x04	; 4
 3f2:	82 e0       	ldi	r24, 0x02	; 2
 3f4:	0e 94 51 02 	call	0x4a2	; 0x4a2 <DIO_SetInputPullUp>
	DIO_SetInputPullUp(ROW_PORT,ROW_2_Pin);
 3f8:	65 e0       	ldi	r22, 0x05	; 5
 3fa:	82 e0       	ldi	r24, 0x02	; 2
 3fc:	0e 94 51 02 	call	0x4a2	; 0x4a2 <DIO_SetInputPullUp>
	DIO_SetInputPullUp(ROW_PORT,ROW_3_Pin);
 400:	66 e0       	ldi	r22, 0x06	; 6
 402:	82 e0       	ldi	r24, 0x02	; 2
 404:	0e 94 51 02 	call	0x4a2	; 0x4a2 <DIO_SetInputPullUp>
 408:	08 95       	ret

Disassembly of section .text.KP_GetKey:

00000264 <KP_GetKey>:
	
	
}
u8 KP_GetKey(void){
 264:	df 92       	push	r13
 266:	ef 92       	push	r14
 268:	ff 92       	push	r15
 26a:	0f 93       	push	r16
 26c:	1f 93       	push	r17
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
	
	u8 key=NO_KEY;
	for (u8 col=0;col<4;col++)
 272:	d0 e0       	ldi	r29, 0x00	; 0
	
	
}
u8 KP_GetKey(void){
	
	u8 key=NO_KEY;
 274:	0f 2e       	mov	r0, r31
 276:	f4 e2       	ldi	r31, 0x24	; 36
 278:	df 2e       	mov	r13, r31
 27a:	f0 2d       	mov	r31, r0
	for (u8 col=0;col<4;col++)
 27c:	3f c0       	rjmp	.+126    	; 0x2fc <KP_GetKey+0x98>
	{
		DIO_SetPinValue(COL_PORT,COL_Pin_ARRAY[col],LOW);
 27e:	ed 2e       	mov	r14, r29
 280:	f1 2c       	mov	r15, r1
 282:	f7 01       	movw	r30, r14
 284:	ec 58       	subi	r30, 0x8C	; 140
 286:	ff 4f       	sbci	r31, 0xFF	; 255
 288:	60 81       	ld	r22, Z
 28a:	40 e0       	ldi	r20, 0x00	; 0
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_SetPinValue>
		for (u8 row=0;row<4;row++)
 292:	c0 e0       	ldi	r28, 0x00	; 0
 294:	28 c0       	rjmp	.+80     	; 0x2e6 <KP_GetKey+0x82>
		{
			if (LOW == DIO_GetPinValue(ROW_PORT,ROW_Pin_ARRAY[row]) )
 296:	0c 2f       	mov	r16, r28
 298:	10 e0       	ldi	r17, 0x00	; 0
 29a:	f8 01       	movw	r30, r16
 29c:	e0 59       	subi	r30, 0x90	; 144
 29e:	ff 4f       	sbci	r31, 0xFF	; 255
 2a0:	60 81       	ld	r22, Z
 2a2:	82 e0       	ldi	r24, 0x02	; 2
 2a4:	0e 94 05 02 	call	0x40a	; 0x40a <DIO_GetPinValue>
 2a8:	81 11       	cpse	r24, r1
 2aa:	1c c0       	rjmp	.+56     	; 0x2e4 <KP_GetKey+0x80>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ac:	2f e7       	ldi	r18, 0x7F	; 127
 2ae:	85 eb       	ldi	r24, 0xB5	; 181
 2b0:	91 e0       	ldi	r25, 0x01	; 1
 2b2:	21 50       	subi	r18, 0x01	; 1
 2b4:	80 40       	sbci	r24, 0x00	; 0
 2b6:	90 40       	sbci	r25, 0x00	; 0
 2b8:	e1 f7       	brne	.-8      	; 0x2b2 <KP_GetKey+0x4e>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <KP_GetKey+0x58>
 2bc:	00 00       	nop
			{
				_delay_ms(35);
				if (LOW == DIO_GetPinValue(ROW_PORT,ROW_Pin_ARRAY[row]) )
 2be:	f8 01       	movw	r30, r16
 2c0:	e0 59       	subi	r30, 0x90	; 144
 2c2:	ff 4f       	sbci	r31, 0xFF	; 255
 2c4:	60 81       	ld	r22, Z
 2c6:	82 e0       	ldi	r24, 0x02	; 2
 2c8:	0e 94 05 02 	call	0x40a	; 0x40a <DIO_GetPinValue>
 2cc:	81 11       	cpse	r24, r1
 2ce:	0a c0       	rjmp	.+20     	; 0x2e4 <KP_GetKey+0x80>
				{
					key=KP_Array[row][col] ;
 2d0:	f8 01       	movw	r30, r16
 2d2:	ee 0f       	add	r30, r30
 2d4:	ff 1f       	adc	r31, r31
 2d6:	ee 0f       	add	r30, r30
 2d8:	ff 1f       	adc	r31, r31
 2da:	e0 5a       	subi	r30, 0xA0	; 160
 2dc:	ff 4f       	sbci	r31, 0xFF	; 255
 2de:	ee 0d       	add	r30, r14
 2e0:	ff 1d       	adc	r31, r15
 2e2:	d0 80       	ld	r13, Z
	
	u8 key=NO_KEY;
	for (u8 col=0;col<4;col++)
	{
		DIO_SetPinValue(COL_PORT,COL_Pin_ARRAY[col],LOW);
		for (u8 row=0;row<4;row++)
 2e4:	cf 5f       	subi	r28, 0xFF	; 255
 2e6:	c4 30       	cpi	r28, 0x04	; 4
 2e8:	b0 f2       	brcs	.-84     	; 0x296 <KP_GetKey+0x32>
				}
			}
		}
		
		
		DIO_SetPinValue(COL_PORT,COL_Pin_ARRAY[col],HIGH);
 2ea:	f7 01       	movw	r30, r14
 2ec:	ec 58       	subi	r30, 0x8C	; 140
 2ee:	ff 4f       	sbci	r31, 0xFF	; 255
 2f0:	60 81       	ld	r22, Z
 2f2:	41 e0       	ldi	r20, 0x01	; 1
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_SetPinValue>
	
}
u8 KP_GetKey(void){
	
	u8 key=NO_KEY;
	for (u8 col=0;col<4;col++)
 2fa:	df 5f       	subi	r29, 0xFF	; 255
 2fc:	d4 30       	cpi	r29, 0x04	; 4
 2fe:	08 f4       	brcc	.+2      	; 0x302 <KP_GetKey+0x9e>
 300:	be cf       	rjmp	.-132    	; 0x27e <KP_GetKey+0x1a>
		
	}
	
	return key;
	
 302:	8d 2d       	mov	r24, r13
 304:	df 91       	pop	r29
 306:	cf 91       	pop	r28
 308:	1f 91       	pop	r17
 30a:	0f 91       	pop	r16
 30c:	ff 90       	pop	r15
 30e:	ef 90       	pop	r14
 310:	df 90       	pop	r13
 312:	08 95       	ret

Disassembly of section .text.SEVSEG_init:

00000464 <SEVSEG_init>:
	}
}

void SEVSEG_init(){
	
		DIO_SetPinDir(DIO_PORTA,Pin4,OUTPUT);
 464:	43 e0       	ldi	r20, 0x03	; 3
 466:	64 e0       	ldi	r22, 0x04	; 4
 468:	80 e0       	ldi	r24, 0x00	; 0
 46a:	0e 94 58 00 	call	0xb0	; 0xb0 <__data_load_end>
		DIO_SetPinDir(DIO_PORTA,Pin5,OUTPUT);
 46e:	43 e0       	ldi	r20, 0x03	; 3
 470:	65 e0       	ldi	r22, 0x05	; 5
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	0e 94 58 00 	call	0xb0	; 0xb0 <__data_load_end>
		DIO_SetPinDir(DIO_PORTA,Pin6,OUTPUT);
 478:	43 e0       	ldi	r20, 0x03	; 3
 47a:	66 e0       	ldi	r22, 0x06	; 6
 47c:	80 e0       	ldi	r24, 0x00	; 0
 47e:	0e 94 58 00 	call	0xb0	; 0xb0 <__data_load_end>
		DIO_SetPinDir(DIO_PORTA,Pin7,OUTPUT);
 482:	43 e0       	ldi	r20, 0x03	; 3
 484:	67 e0       	ldi	r22, 0x07	; 7
 486:	80 e0       	ldi	r24, 0x00	; 0
 488:	0e 94 58 00 	call	0xb0	; 0xb0 <__data_load_end>
		
		DIO_SetPinDir(DIO_PORTB,Pin1,OUTPUT);//En2
 48c:	43 e0       	ldi	r20, 0x03	; 3
 48e:	61 e0       	ldi	r22, 0x01	; 1
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	0e 94 58 00 	call	0xb0	; 0xb0 <__data_load_end>
		DIO_SetPinDir(DIO_PORTB,Pin2,OUTPUT);//En1
 496:	43 e0       	ldi	r20, 0x03	; 3
 498:	62 e0       	ldi	r22, 0x02	; 2
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	0e 94 58 00 	call	0xb0	; 0xb0 <__data_load_end>
 4a0:	08 95       	ret

Disassembly of section .text.SEVSEG_Display:

00000314 <SEVSEG_Display>:
	
}


void SEVSEG_Display(u8 num){
 314:	1f 93       	push	r17
 316:	cf 93       	push	r28
 318:	df 93       	push	r29
 31a:	18 2f       	mov	r17, r24
	
	
for (u8 i=0;i<20;i++)
 31c:	d0 e0       	ldi	r29, 0x00	; 0
 31e:	36 c0       	rjmp	.+108    	; 0x38c <SEVSEG_Display+0x78>
{
	
	
	DIO_SetPinValue(DIO_PORTB,Pin1,LOW);//En2
 320:	40 e0       	ldi	r20, 0x00	; 0
 322:	61 e0       	ldi	r22, 0x01	; 1
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,Pin2,HIGH);//En1
 32a:	41 e0       	ldi	r20, 0x01	; 1
 32c:	62 e0       	ldi	r22, 0x02	; 2
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_SetPinValue>
	
	PORTA=(num/10)<<4;
 334:	cd ec       	ldi	r28, 0xCD	; 205
 336:	1c 9f       	mul	r17, r28
 338:	c1 2d       	mov	r28, r1
 33a:	11 24       	eor	r1, r1
 33c:	c6 95       	lsr	r28
 33e:	c6 95       	lsr	r28
 340:	c6 95       	lsr	r28
 342:	8c 2f       	mov	r24, r28
 344:	82 95       	swap	r24
 346:	80 7f       	andi	r24, 0xF0	; 240
 348:	8b bb       	out	0x1b, r24	; 27
 34a:	8f e3       	ldi	r24, 0x3F	; 63
 34c:	9f e1       	ldi	r25, 0x1F	; 31
 34e:	01 97       	sbiw	r24, 0x01	; 1
 350:	f1 f7       	brne	.-4      	; 0x34e <SEVSEG_Display+0x3a>
 352:	00 c0       	rjmp	.+0      	; 0x354 <SEVSEG_Display+0x40>
 354:	00 00       	nop
	_delay_ms(2);
	
	DIO_SetPinValue(DIO_PORTB,Pin1,HIGH);//En2
 356:	41 e0       	ldi	r20, 0x01	; 1
 358:	61 e0       	ldi	r22, 0x01	; 1
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,Pin2,LOW);//En1
 360:	40 e0       	ldi	r20, 0x00	; 0
 362:	62 e0       	ldi	r22, 0x02	; 2
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_SetPinValue>
	
	PORTA=(num%10)<<4;
 36a:	cc 0f       	add	r28, r28
 36c:	8c 2f       	mov	r24, r28
 36e:	88 0f       	add	r24, r24
 370:	88 0f       	add	r24, r24
 372:	c8 0f       	add	r28, r24
 374:	81 2f       	mov	r24, r17
 376:	8c 1b       	sub	r24, r28
 378:	82 95       	swap	r24
 37a:	80 7f       	andi	r24, 0xF0	; 240
 37c:	8b bb       	out	0x1b, r24	; 27
 37e:	8f e3       	ldi	r24, 0x3F	; 63
 380:	9f e1       	ldi	r25, 0x1F	; 31
 382:	01 97       	sbiw	r24, 0x01	; 1
 384:	f1 f7       	brne	.-4      	; 0x382 <SEVSEG_Display+0x6e>
 386:	00 c0       	rjmp	.+0      	; 0x388 <SEVSEG_Display+0x74>
 388:	00 00       	nop


void SEVSEG_Display(u8 num){
	
	
for (u8 i=0;i<20;i++)
 38a:	df 5f       	subi	r29, 0xFF	; 255
 38c:	d4 31       	cpi	r29, 0x14	; 20
 38e:	40 f2       	brcs	.-112    	; 0x320 <SEVSEG_Display+0xc>
	
	PORTA=(num%10)<<4;
	_delay_ms(2);
	
}
 390:	df 91       	pop	r29
 392:	cf 91       	pop	r28
 394:	1f 91       	pop	r17
 396:	08 95       	ret

Disassembly of section .text.main:

000004c0 <main>:


int main(void)
{

KP_init();
 4c0:	0e 94 cc 01 	call	0x398	; 0x398 <KP_init>
SEVSEG_init();
 4c4:	0e 94 32 02 	call	0x464	; 0x464 <SEVSEG_init>
	while(1)
	{
		
		u8 key = KP_GetKey();
 4c8:	0e 94 32 01 	call	0x264	; 0x264 <KP_GetKey>
		
		if (key != NO_KEY)
 4cc:	84 32       	cpi	r24, 0x24	; 36
 4ce:	e1 f3       	breq	.-8      	; 0x4c8 <main+0x8>
		{
			SEVSEG_Display(key);
 4d0:	0e 94 8a 01 	call	0x314	; 0x314 <SEVSEG_Display>
 4d4:	f9 cf       	rjmp	.-14     	; 0x4c8 <main+0x8>

Disassembly of section .text.DIO_SetPinDir:

000000b0 <DIO_SetPinDir>:

#include "DIO_int.h"

void DIO_SetPinDir(PORT_TYPE port ,PIN_TYPE pin, MODE_TYPE dir ){
	
	switch (port)
  b0:	81 30       	cpi	r24, 0x01	; 1
  b2:	01 f1       	breq	.+64     	; 0xf4 <DIO_SetPinDir+0x44>
  b4:	30 f0       	brcs	.+12     	; 0xc2 <DIO_SetPinDir+0x12>
  b6:	82 30       	cpi	r24, 0x02	; 2
  b8:	b1 f1       	breq	.+108    	; 0x126 <DIO_SetPinDir+0x76>
  ba:	83 30       	cpi	r24, 0x03	; 3
  bc:	09 f4       	brne	.+2      	; 0xc0 <DIO_SetPinDir+0x10>
  be:	4c c0       	rjmp	.+152    	; 0x158 <DIO_SetPinDir+0xa8>
  c0:	08 95       	ret
	{
		
		case DIO_PORTA:
		(dir==OUTPUT)? (SET_BIT(DDRA,pin)):(CLEAR_BIT(DDRA,pin)) ;
  c2:	43 30       	cpi	r20, 0x03	; 3
  c4:	59 f4       	brne	.+22     	; 0xdc <DIO_SetPinDir+0x2c>
  c6:	2a b3       	in	r18, 0x1a	; 26
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <DIO_SetPinDir+0x22>
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	6a 95       	dec	r22
  d4:	e2 f7       	brpl	.-8      	; 0xce <DIO_SetPinDir+0x1e>
  d6:	82 2b       	or	r24, r18
  d8:	8a bb       	out	0x1a, r24	; 26
  da:	08 95       	ret
  dc:	2a b3       	in	r18, 0x1a	; 26
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_SetPinDir+0x38>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	6a 95       	dec	r22
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_SetPinDir+0x34>
  ec:	80 95       	com	r24
  ee:	82 23       	and	r24, r18
  f0:	8a bb       	out	0x1a, r24	; 26
  f2:	08 95       	ret
		break;
		
		case DIO_PORTB:
		(dir==OUTPUT)? (SET_BIT(DDRB,pin)):(CLEAR_BIT(DDRB,pin)) ;
  f4:	43 30       	cpi	r20, 0x03	; 3
  f6:	59 f4       	brne	.+22     	; 0x10e <DIO_SetPinDir+0x5e>
  f8:	27 b3       	in	r18, 0x17	; 23
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_SetPinDir+0x54>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	6a 95       	dec	r22
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_SetPinDir+0x50>
 108:	82 2b       	or	r24, r18
 10a:	87 bb       	out	0x17, r24	; 23
 10c:	08 95       	ret
 10e:	27 b3       	in	r18, 0x17	; 23
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	02 c0       	rjmp	.+4      	; 0x11a <DIO_SetPinDir+0x6a>
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	6a 95       	dec	r22
 11c:	e2 f7       	brpl	.-8      	; 0x116 <DIO_SetPinDir+0x66>
 11e:	80 95       	com	r24
 120:	82 23       	and	r24, r18
 122:	87 bb       	out	0x17, r24	; 23
 124:	08 95       	ret
		break;
		
		case DIO_PORTC:
		(dir==OUTPUT)? (SET_BIT(DDRC,pin)):(CLEAR_BIT(DDRC,pin)) ;
 126:	43 30       	cpi	r20, 0x03	; 3
 128:	59 f4       	brne	.+22     	; 0x140 <DIO_SetPinDir+0x90>
 12a:	24 b3       	in	r18, 0x14	; 20
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_SetPinDir+0x86>
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	6a 95       	dec	r22
 138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_SetPinDir+0x82>
 13a:	82 2b       	or	r24, r18
 13c:	84 bb       	out	0x14, r24	; 20
 13e:	08 95       	ret
 140:	24 b3       	in	r18, 0x14	; 20
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_SetPinDir+0x9c>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_SetPinDir+0x98>
 150:	80 95       	com	r24
 152:	82 23       	and	r24, r18
 154:	84 bb       	out	0x14, r24	; 20
 156:	08 95       	ret
		break;
		
		case DIO_PORTD:
		(dir==OUTPUT)? (SET_BIT(DDRD,pin)):(CLEAR_BIT(DDRD,pin)) ;
 158:	43 30       	cpi	r20, 0x03	; 3
 15a:	59 f4       	brne	.+22     	; 0x172 <DIO_SetPinDir+0xc2>
 15c:	21 b3       	in	r18, 0x11	; 17
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	02 c0       	rjmp	.+4      	; 0x168 <DIO_SetPinDir+0xb8>
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	6a 95       	dec	r22
 16a:	e2 f7       	brpl	.-8      	; 0x164 <DIO_SetPinDir+0xb4>
 16c:	82 2b       	or	r24, r18
 16e:	81 bb       	out	0x11, r24	; 17
 170:	08 95       	ret
 172:	21 b3       	in	r18, 0x11	; 17
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	02 c0       	rjmp	.+4      	; 0x17e <DIO_SetPinDir+0xce>
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	6a 95       	dec	r22
 180:	e2 f7       	brpl	.-8      	; 0x17a <DIO_SetPinDir+0xca>
 182:	80 95       	com	r24
 184:	82 23       	and	r24, r18
 186:	81 bb       	out	0x11, r24	; 17
 188:	08 95       	ret

Disassembly of section .text.DIO_SetPinValue:

0000018a <DIO_SetPinValue>:
	
	
}
void DIO_SetPinValue(PORT_TYPE port ,PIN_TYPE pin , MODE_TYPE val )
{
	switch (port)
 18a:	81 30       	cpi	r24, 0x01	; 1
 18c:	01 f1       	breq	.+64     	; 0x1ce <DIO_SetPinValue+0x44>
 18e:	30 f0       	brcs	.+12     	; 0x19c <DIO_SetPinValue+0x12>
 190:	82 30       	cpi	r24, 0x02	; 2
 192:	b1 f1       	breq	.+108    	; 0x200 <DIO_SetPinValue+0x76>
 194:	83 30       	cpi	r24, 0x03	; 3
 196:	09 f4       	brne	.+2      	; 0x19a <DIO_SetPinValue+0x10>
 198:	4c c0       	rjmp	.+152    	; 0x232 <DIO_SetPinValue+0xa8>
 19a:	08 95       	ret
	{
		case DIO_PORTA:
		(val==HIGH)? (SET_BIT(PORTA,pin)):(CLEAR_BIT(PORTA,pin)) ;
 19c:	41 30       	cpi	r20, 0x01	; 1
 19e:	59 f4       	brne	.+22     	; 0x1b6 <DIO_SetPinValue+0x2c>
 1a0:	2b b3       	in	r18, 0x1b	; 27
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <DIO_SetPinValue+0x22>
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	6a 95       	dec	r22
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <DIO_SetPinValue+0x1e>
 1b0:	82 2b       	or	r24, r18
 1b2:	8b bb       	out	0x1b, r24	; 27
 1b4:	08 95       	ret
 1b6:	2b b3       	in	r18, 0x1b	; 27
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_SetPinValue+0x38>
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	6a 95       	dec	r22
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_SetPinValue+0x34>
 1c6:	80 95       	com	r24
 1c8:	82 23       	and	r24, r18
 1ca:	8b bb       	out	0x1b, r24	; 27
 1cc:	08 95       	ret
		break;
		
		case DIO_PORTB:
		(val==HIGH)? (SET_BIT(PORTB,pin)):(CLEAR_BIT(PORTB,pin)) ;
 1ce:	41 30       	cpi	r20, 0x01	; 1
 1d0:	59 f4       	brne	.+22     	; 0x1e8 <DIO_SetPinValue+0x5e>
 1d2:	28 b3       	in	r18, 0x18	; 24
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <DIO_SetPinValue+0x54>
 1da:	88 0f       	add	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	6a 95       	dec	r22
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <DIO_SetPinValue+0x50>
 1e2:	82 2b       	or	r24, r18
 1e4:	88 bb       	out	0x18, r24	; 24
 1e6:	08 95       	ret
 1e8:	28 b3       	in	r18, 0x18	; 24
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <DIO_SetPinValue+0x6a>
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	6a 95       	dec	r22
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <DIO_SetPinValue+0x66>
 1f8:	80 95       	com	r24
 1fa:	82 23       	and	r24, r18
 1fc:	88 bb       	out	0x18, r24	; 24
 1fe:	08 95       	ret
		break;
		
		case DIO_PORTC:
		(val==HIGH)? (SET_BIT(PORTC,pin)):(CLEAR_BIT(PORTC,pin)) ;
 200:	41 30       	cpi	r20, 0x01	; 1
 202:	59 f4       	brne	.+22     	; 0x21a <DIO_SetPinValue+0x90>
 204:	25 b3       	in	r18, 0x15	; 21
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_SetPinValue+0x86>
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	6a 95       	dec	r22
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_SetPinValue+0x82>
 214:	82 2b       	or	r24, r18
 216:	85 bb       	out	0x15, r24	; 21
 218:	08 95       	ret
 21a:	25 b3       	in	r18, 0x15	; 21
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	02 c0       	rjmp	.+4      	; 0x226 <DIO_SetPinValue+0x9c>
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	6a 95       	dec	r22
 228:	e2 f7       	brpl	.-8      	; 0x222 <DIO_SetPinValue+0x98>
 22a:	80 95       	com	r24
 22c:	82 23       	and	r24, r18
 22e:	85 bb       	out	0x15, r24	; 21
 230:	08 95       	ret
		break;
		
		case DIO_PORTD:
		(val==HIGH)? (SET_BIT(PORTD,pin)):(CLEAR_BIT(PORTD,pin)) ;
 232:	41 30       	cpi	r20, 0x01	; 1
 234:	59 f4       	brne	.+22     	; 0x24c <DIO_SetPinValue+0xc2>
 236:	22 b3       	in	r18, 0x12	; 18
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	02 c0       	rjmp	.+4      	; 0x242 <DIO_SetPinValue+0xb8>
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	6a 95       	dec	r22
 244:	e2 f7       	brpl	.-8      	; 0x23e <DIO_SetPinValue+0xb4>
 246:	82 2b       	or	r24, r18
 248:	82 bb       	out	0x12, r24	; 18
 24a:	08 95       	ret
 24c:	22 b3       	in	r18, 0x12	; 18
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	02 c0       	rjmp	.+4      	; 0x258 <DIO_SetPinValue+0xce>
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	6a 95       	dec	r22
 25a:	e2 f7       	brpl	.-8      	; 0x254 <DIO_SetPinValue+0xca>
 25c:	80 95       	com	r24
 25e:	82 23       	and	r24, r18
 260:	82 bb       	out	0x12, r24	; 18
 262:	08 95       	ret

Disassembly of section .text.DIO_GetPinValue:

0000040a <DIO_GetPinValue>:
	}
}

u8  DIO_GetPinValue(PORT_TYPE port ,PIN_TYPE pin  )	{
	
	switch(port){
 40a:	81 30       	cpi	r24, 0x01	; 1
 40c:	79 f0       	breq	.+30     	; 0x42c <DIO_GetPinValue+0x22>
 40e:	28 f0       	brcs	.+10     	; 0x41a <DIO_GetPinValue+0x10>
 410:	82 30       	cpi	r24, 0x02	; 2
 412:	a9 f0       	breq	.+42     	; 0x43e <DIO_GetPinValue+0x34>
 414:	83 30       	cpi	r24, 0x03	; 3
 416:	e1 f0       	breq	.+56     	; 0x450 <DIO_GetPinValue+0x46>
 418:	24 c0       	rjmp	.+72     	; 0x462 <DIO_GetPinValue+0x58>
		
		case  DIO_PORTA :	return GET_BIT(PINA,pin);
 41a:	89 b3       	in	r24, 0x19	; 25
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	02 c0       	rjmp	.+4      	; 0x424 <DIO_GetPinValue+0x1a>
 420:	95 95       	asr	r25
 422:	87 95       	ror	r24
 424:	6a 95       	dec	r22
 426:	e2 f7       	brpl	.-8      	; 0x420 <DIO_GetPinValue+0x16>
 428:	81 70       	andi	r24, 0x01	; 1
 42a:	08 95       	ret
		case  DIO_PORTB :   return GET_BIT(PINB,pin);
 42c:	86 b3       	in	r24, 0x16	; 22
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	02 c0       	rjmp	.+4      	; 0x436 <DIO_GetPinValue+0x2c>
 432:	95 95       	asr	r25
 434:	87 95       	ror	r24
 436:	6a 95       	dec	r22
 438:	e2 f7       	brpl	.-8      	; 0x432 <DIO_GetPinValue+0x28>
 43a:	81 70       	andi	r24, 0x01	; 1
 43c:	08 95       	ret
		case  DIO_PORTC :   return GET_BIT(PINC,pin);
 43e:	83 b3       	in	r24, 0x13	; 19
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	02 c0       	rjmp	.+4      	; 0x448 <DIO_GetPinValue+0x3e>
 444:	95 95       	asr	r25
 446:	87 95       	ror	r24
 448:	6a 95       	dec	r22
 44a:	e2 f7       	brpl	.-8      	; 0x444 <DIO_GetPinValue+0x3a>
 44c:	81 70       	andi	r24, 0x01	; 1
 44e:	08 95       	ret
		case  DIO_PORTD :   return GET_BIT(PIND,pin);
 450:	80 b3       	in	r24, 0x10	; 16
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	02 c0       	rjmp	.+4      	; 0x45a <DIO_GetPinValue+0x50>
 456:	95 95       	asr	r25
 458:	87 95       	ror	r24
 45a:	6a 95       	dec	r22
 45c:	e2 f7       	brpl	.-8      	; 0x456 <DIO_GetPinValue+0x4c>
 45e:	81 70       	andi	r24, 0x01	; 1
 460:	08 95       	ret
		
		
	}
	
	
}
 462:	08 95       	ret

Disassembly of section .text.DIO_SetInputPullUp:

000004a2 <DIO_SetInputPullUp>:



void DIO_SetInputPullUp(PORT_TYPE port ,PIN_TYPE pin){
 4a2:	cf 93       	push	r28
 4a4:	df 93       	push	r29
 4a6:	c8 2f       	mov	r28, r24
 4a8:	d6 2f       	mov	r29, r22
	
	DIO_SetPinDir(port,pin,INPUT);
 4aa:	42 e0       	ldi	r20, 0x02	; 2
 4ac:	0e 94 58 00 	call	0xb0	; 0xb0 <__data_load_end>
	DIO_SetPinValue(port,pin,HIGH);
 4b0:	41 e0       	ldi	r20, 0x01	; 1
 4b2:	6d 2f       	mov	r22, r29
 4b4:	8c 2f       	mov	r24, r28
 4b6:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_SetPinValue>
	
}
 4ba:	df 91       	pop	r29
 4bc:	cf 91       	pop	r28
 4be:	08 95       	ret
