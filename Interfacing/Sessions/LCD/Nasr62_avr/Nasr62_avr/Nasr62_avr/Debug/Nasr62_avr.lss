
Nasr62_avr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000624  00000698  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000698  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000c0  00000000  00000000  000006c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001e6e  00000000  00000000  00000787  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000092c  00000000  00000000  000025f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000881  00000000  00000000  00002f21  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000150  00000000  00000000  000037a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000217  00000000  00000000  000038f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000925  00000000  00000000  00003b0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000098  00000000  00000000  00004430  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000608  00000608  0000067c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000044c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.KP_init 00000072  000004f6  000004f6  0000056a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.KP_GetKey 000000b0  0000032a  0000032a  0000039e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .data.KP_Array 00000010  00800060  0000060c  00000680  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 16 .data.ROW_Pin_ARRAY 00000004  00800070  0000061c  00000690  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 17 .data.COL_Pin_ARRAY 00000004  00800074  00000620  00000694  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 18 .text.LCD_Write_CMD 0000008e  000003da  000003da  0000044e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.LCD_init 000000c6  00000264  00000264  000002d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.LCD_Write_CHAR 0000008e  00000468  00000468  000004dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.main    00000028  000005c2  000005c2  00000636  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.DIO_SetPinDir 000000da  000000b0  000000b0  00000124  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.DIO_SetPinValue 000000da  0000018a  0000018a  000001fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.DIO_GetPinValue 0000005a  00000568  00000568  000005dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.DIO_SetInputPullUp 0000001e  000005ea  000005ea  0000065e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 04 03 	jmp	0x608	; 0x608 <__bad_interrupt>
   8:	0c 94 04 03 	jmp	0x608	; 0x608 <__bad_interrupt>
   c:	0c 94 04 03 	jmp	0x608	; 0x608 <__bad_interrupt>
  10:	0c 94 04 03 	jmp	0x608	; 0x608 <__bad_interrupt>
  14:	0c 94 04 03 	jmp	0x608	; 0x608 <__bad_interrupt>
  18:	0c 94 04 03 	jmp	0x608	; 0x608 <__bad_interrupt>
  1c:	0c 94 04 03 	jmp	0x608	; 0x608 <__bad_interrupt>
  20:	0c 94 04 03 	jmp	0x608	; 0x608 <__bad_interrupt>
  24:	0c 94 04 03 	jmp	0x608	; 0x608 <__bad_interrupt>
  28:	0c 94 04 03 	jmp	0x608	; 0x608 <__bad_interrupt>
  2c:	0c 94 04 03 	jmp	0x608	; 0x608 <__bad_interrupt>
  30:	0c 94 04 03 	jmp	0x608	; 0x608 <__bad_interrupt>
  34:	0c 94 04 03 	jmp	0x608	; 0x608 <__bad_interrupt>
  38:	0c 94 04 03 	jmp	0x608	; 0x608 <__bad_interrupt>
  3c:	0c 94 04 03 	jmp	0x608	; 0x608 <__bad_interrupt>
  40:	0c 94 04 03 	jmp	0x608	; 0x608 <__bad_interrupt>
  44:	0c 94 04 03 	jmp	0x608	; 0x608 <__bad_interrupt>
  48:	0c 94 04 03 	jmp	0x608	; 0x608 <__bad_interrupt>
  4c:	0c 94 04 03 	jmp	0x608	; 0x608 <__bad_interrupt>
  50:	0c 94 04 03 	jmp	0x608	; 0x608 <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 78       	andi	r16, 0x80	; 128
  58:	00 06       	cpc	r0, r16
  5a:	0c 00       	.word	0x000c	; ????

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf e5       	ldi	r28, 0x5F	; 95
  62:	d8 e0       	ldi	r29, 0x08	; 8
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	e4 e5       	ldi	r30, 0x54	; 84
  6a:	f0 e0       	ldi	r31, 0x00	; 0
  6c:	40 e0       	ldi	r20, 0x00	; 0
  6e:	17 c0       	rjmp	.+46     	; 0x9e <__do_clear_bss+0x8>
  70:	b5 91       	lpm	r27, Z+
  72:	a5 91       	lpm	r26, Z+
  74:	35 91       	lpm	r19, Z+
  76:	25 91       	lpm	r18, Z+
  78:	05 91       	lpm	r16, Z+
  7a:	07 fd       	sbrc	r16, 7
  7c:	0c c0       	rjmp	.+24     	; 0x96 <__do_clear_bss>
  7e:	95 91       	lpm	r25, Z+
  80:	85 91       	lpm	r24, Z+
  82:	ef 01       	movw	r28, r30
  84:	f9 2f       	mov	r31, r25
  86:	e8 2f       	mov	r30, r24
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a2 17       	cp	r26, r18
  8e:	b3 07       	cpc	r27, r19
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0x20>
  92:	fe 01       	movw	r30, r28
  94:	04 c0       	rjmp	.+8      	; 0x9e <__do_clear_bss+0x8>

00000096 <__do_clear_bss>:
  96:	1d 92       	st	X+, r1
  98:	a2 17       	cp	r26, r18
  9a:	b3 07       	cpc	r27, r19
  9c:	e1 f7       	brne	.-8      	; 0x96 <__do_clear_bss>
  9e:	eb 35       	cpi	r30, 0x5B	; 91
  a0:	f4 07       	cpc	r31, r20
  a2:	31 f7       	brne	.-52     	; 0x70 <__do_copy_data+0x8>
  a4:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <main>
  a8:	0c 94 56 00 	jmp	0xac	; 0xac <_exit>

000000ac <_exit>:
  ac:	f8 94       	cli

000000ae <__stop_program>:
  ae:	ff cf       	rjmp	.-2      	; 0xae <__stop_program>

Disassembly of section .text:

00000608 <__bad_interrupt>:
 608:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.KP_init:

000004f6 <KP_init>:
{'7','8','9','C' },
{'*','0','#','D' } };

void KP_init(){
	
	DIO_SetPinDir(COL_PORT,COL_0_Pin,OUTPUT);
 4f6:	43 e0       	ldi	r20, 0x03	; 3
 4f8:	64 e0       	ldi	r22, 0x04	; 4
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	0e 94 58 00 	call	0xb0	; 0xb0 <__data_load_end>
	DIO_SetPinDir(COL_PORT,COL_1_Pin,OUTPUT);
 500:	43 e0       	ldi	r20, 0x03	; 3
 502:	65 e0       	ldi	r22, 0x05	; 5
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	0e 94 58 00 	call	0xb0	; 0xb0 <__data_load_end>
	DIO_SetPinDir(COL_PORT,COL_2_Pin,OUTPUT);
 50a:	43 e0       	ldi	r20, 0x03	; 3
 50c:	66 e0       	ldi	r22, 0x06	; 6
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	0e 94 58 00 	call	0xb0	; 0xb0 <__data_load_end>
	DIO_SetPinDir(COL_PORT,COL_3_Pin,OUTPUT);
 514:	43 e0       	ldi	r20, 0x03	; 3
 516:	67 e0       	ldi	r22, 0x07	; 7
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	0e 94 58 00 	call	0xb0	; 0xb0 <__data_load_end>
	
	DIO_SetPinValue(COL_PORT,COL_0_Pin,HIGH);
 51e:	41 e0       	ldi	r20, 0x01	; 1
 520:	64 e0       	ldi	r22, 0x04	; 4
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_SetPinValue>
	DIO_SetPinValue(COL_PORT,COL_1_Pin,HIGH);
 528:	41 e0       	ldi	r20, 0x01	; 1
 52a:	65 e0       	ldi	r22, 0x05	; 5
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_SetPinValue>
	DIO_SetPinValue(COL_PORT,COL_2_Pin,HIGH);
 532:	41 e0       	ldi	r20, 0x01	; 1
 534:	66 e0       	ldi	r22, 0x06	; 6
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_SetPinValue>
	DIO_SetPinValue(COL_PORT,COL_3_Pin,HIGH);
 53c:	41 e0       	ldi	r20, 0x01	; 1
 53e:	67 e0       	ldi	r22, 0x07	; 7
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_SetPinValue>
	
	
	DIO_SetInputPullUp(ROW_PORT,ROW_0_Pin);
 546:	63 e0       	ldi	r22, 0x03	; 3
 548:	82 e0       	ldi	r24, 0x02	; 2
 54a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <DIO_SetInputPullUp>
	DIO_SetInputPullUp(ROW_PORT,ROW_1_Pin);
 54e:	64 e0       	ldi	r22, 0x04	; 4
 550:	82 e0       	ldi	r24, 0x02	; 2
 552:	0e 94 f5 02 	call	0x5ea	; 0x5ea <DIO_SetInputPullUp>
	DIO_SetInputPullUp(ROW_PORT,ROW_2_Pin);
 556:	65 e0       	ldi	r22, 0x05	; 5
 558:	82 e0       	ldi	r24, 0x02	; 2
 55a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <DIO_SetInputPullUp>
	DIO_SetInputPullUp(ROW_PORT,ROW_3_Pin);
 55e:	66 e0       	ldi	r22, 0x06	; 6
 560:	82 e0       	ldi	r24, 0x02	; 2
 562:	0e 94 f5 02 	call	0x5ea	; 0x5ea <DIO_SetInputPullUp>
 566:	08 95       	ret

Disassembly of section .text.KP_GetKey:

0000032a <KP_GetKey>:
	
	
}
u8 KP_GetKey(void){
 32a:	df 92       	push	r13
 32c:	ef 92       	push	r14
 32e:	ff 92       	push	r15
 330:	0f 93       	push	r16
 332:	1f 93       	push	r17
 334:	cf 93       	push	r28
 336:	df 93       	push	r29
	
	u8 key=NO_KEY;
	for (u8 col=0;col<4;col++)
 338:	d0 e0       	ldi	r29, 0x00	; 0
	
	
}
u8 KP_GetKey(void){
	
	u8 key=NO_KEY;
 33a:	0f 2e       	mov	r0, r31
 33c:	f4 e2       	ldi	r31, 0x24	; 36
 33e:	df 2e       	mov	r13, r31
 340:	f0 2d       	mov	r31, r0
	for (u8 col=0;col<4;col++)
 342:	3f c0       	rjmp	.+126    	; 0x3c2 <KP_GetKey+0x98>
	{
		DIO_SetPinValue(COL_PORT,COL_Pin_ARRAY[col],LOW);
 344:	ed 2e       	mov	r14, r29
 346:	f1 2c       	mov	r15, r1
 348:	f7 01       	movw	r30, r14
 34a:	ec 58       	subi	r30, 0x8C	; 140
 34c:	ff 4f       	sbci	r31, 0xFF	; 255
 34e:	60 81       	ld	r22, Z
 350:	40 e0       	ldi	r20, 0x00	; 0
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_SetPinValue>
		for (u8 row=0;row<4;row++)
 358:	c0 e0       	ldi	r28, 0x00	; 0
 35a:	28 c0       	rjmp	.+80     	; 0x3ac <KP_GetKey+0x82>
		{
			if (LOW == DIO_GetPinValue(ROW_PORT,ROW_Pin_ARRAY[row]) )
 35c:	0c 2f       	mov	r16, r28
 35e:	10 e0       	ldi	r17, 0x00	; 0
 360:	f8 01       	movw	r30, r16
 362:	e0 59       	subi	r30, 0x90	; 144
 364:	ff 4f       	sbci	r31, 0xFF	; 255
 366:	60 81       	ld	r22, Z
 368:	82 e0       	ldi	r24, 0x02	; 2
 36a:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_GetPinValue>
 36e:	81 11       	cpse	r24, r1
 370:	1c c0       	rjmp	.+56     	; 0x3aa <KP_GetKey+0x80>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 372:	2f e7       	ldi	r18, 0x7F	; 127
 374:	85 eb       	ldi	r24, 0xB5	; 181
 376:	91 e0       	ldi	r25, 0x01	; 1
 378:	21 50       	subi	r18, 0x01	; 1
 37a:	80 40       	sbci	r24, 0x00	; 0
 37c:	90 40       	sbci	r25, 0x00	; 0
 37e:	e1 f7       	brne	.-8      	; 0x378 <KP_GetKey+0x4e>
 380:	00 c0       	rjmp	.+0      	; 0x382 <KP_GetKey+0x58>
 382:	00 00       	nop
			{
				_delay_ms(35);
				if (LOW == DIO_GetPinValue(ROW_PORT,ROW_Pin_ARRAY[row]) )
 384:	f8 01       	movw	r30, r16
 386:	e0 59       	subi	r30, 0x90	; 144
 388:	ff 4f       	sbci	r31, 0xFF	; 255
 38a:	60 81       	ld	r22, Z
 38c:	82 e0       	ldi	r24, 0x02	; 2
 38e:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_GetPinValue>
 392:	81 11       	cpse	r24, r1
 394:	0a c0       	rjmp	.+20     	; 0x3aa <KP_GetKey+0x80>
				{
					key=KP_Array[row][col] ;
 396:	f8 01       	movw	r30, r16
 398:	ee 0f       	add	r30, r30
 39a:	ff 1f       	adc	r31, r31
 39c:	ee 0f       	add	r30, r30
 39e:	ff 1f       	adc	r31, r31
 3a0:	e0 5a       	subi	r30, 0xA0	; 160
 3a2:	ff 4f       	sbci	r31, 0xFF	; 255
 3a4:	ee 0d       	add	r30, r14
 3a6:	ff 1d       	adc	r31, r15
 3a8:	d0 80       	ld	r13, Z
	
	u8 key=NO_KEY;
	for (u8 col=0;col<4;col++)
	{
		DIO_SetPinValue(COL_PORT,COL_Pin_ARRAY[col],LOW);
		for (u8 row=0;row<4;row++)
 3aa:	cf 5f       	subi	r28, 0xFF	; 255
 3ac:	c4 30       	cpi	r28, 0x04	; 4
 3ae:	b0 f2       	brcs	.-84     	; 0x35c <KP_GetKey+0x32>
				}
			}
		}
		
		
		DIO_SetPinValue(COL_PORT,COL_Pin_ARRAY[col],HIGH);
 3b0:	f7 01       	movw	r30, r14
 3b2:	ec 58       	subi	r30, 0x8C	; 140
 3b4:	ff 4f       	sbci	r31, 0xFF	; 255
 3b6:	60 81       	ld	r22, Z
 3b8:	41 e0       	ldi	r20, 0x01	; 1
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_SetPinValue>
	
}
u8 KP_GetKey(void){
	
	u8 key=NO_KEY;
	for (u8 col=0;col<4;col++)
 3c0:	df 5f       	subi	r29, 0xFF	; 255
 3c2:	d4 30       	cpi	r29, 0x04	; 4
 3c4:	08 f4       	brcc	.+2      	; 0x3c8 <KP_GetKey+0x9e>
 3c6:	be cf       	rjmp	.-132    	; 0x344 <KP_GetKey+0x1a>
		
	}
	
	return key;
	
 3c8:	8d 2d       	mov	r24, r13
 3ca:	df 91       	pop	r29
 3cc:	cf 91       	pop	r28
 3ce:	1f 91       	pop	r17
 3d0:	0f 91       	pop	r16
 3d2:	ff 90       	pop	r15
 3d4:	ef 90       	pop	r14
 3d6:	df 90       	pop	r13
 3d8:	08 95       	ret

Disassembly of section .text.LCD_Write_CMD:

000003da <LCD_Write_CMD>:
	
	
	
}

void LCD_Write_CMD(u8 CMD){
 3da:	cf 93       	push	r28
 3dc:	c8 2f       	mov	r28, r24
	
	DIO_SetPinValue(LCD_CMD_PORT,RS_PIN,LOW);
 3de:	40 e0       	ldi	r20, 0x00	; 0
 3e0:	61 e0       	ldi	r22, 0x01	; 1
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_SetPinValue>
	
	DIO_SetPinValue(LCD_CMD_PORT,RW_PIN,LOW);
 3e8:	40 e0       	ldi	r20, 0x00	; 0
 3ea:	62 e0       	ldi	r22, 0x02	; 2
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_SetPinValue>
		

	DIO_SetPinValue(LCD_CMD_PORT,E_PIN,LOW);
 3f2:	40 e0       	ldi	r20, 0x00	; 0
 3f4:	63 e0       	ldi	r22, 0x03	; 3
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_SetPinValue>
 3fc:	8f e9       	ldi	r24, 0x9F	; 159
 3fe:	9f e0       	ldi	r25, 0x0F	; 15
 400:	01 97       	sbiw	r24, 0x01	; 1
 402:	f1 f7       	brne	.-4      	; 0x400 <__EEPROM_REGION_LENGTH__>
 404:	00 c0       	rjmp	.+0      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 406:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_CMD_PORT,E_PIN,HIGH);
 408:	41 e0       	ldi	r20, 0x01	; 1
 40a:	63 e0       	ldi	r22, 0x03	; 3
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_SetPinValue>
	
	LCD_DATA_PORT= (CMD & 0xF0) | (LCD_DATA_PORT & 0x0F) ;
 412:	8b b3       	in	r24, 0x1b	; 27
 414:	9c 2f       	mov	r25, r28
 416:	90 7f       	andi	r25, 0xF0	; 240
 418:	8f 70       	andi	r24, 0x0F	; 15
 41a:	89 2b       	or	r24, r25
 41c:	8b bb       	out	0x1b, r24	; 27

	DIO_SetPinValue(LCD_CMD_PORT,E_PIN,LOW);
 41e:	40 e0       	ldi	r20, 0x00	; 0
 420:	63 e0       	ldi	r22, 0x03	; 3
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_SetPinValue>
 428:	8f e9       	ldi	r24, 0x9F	; 159
 42a:	9f e0       	ldi	r25, 0x0F	; 15
 42c:	01 97       	sbiw	r24, 0x01	; 1
 42e:	f1 f7       	brne	.-4      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 430:	00 c0       	rjmp	.+0      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 432:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_CMD_PORT,E_PIN,HIGH);
 434:	41 e0       	ldi	r20, 0x01	; 1
 436:	63 e0       	ldi	r22, 0x03	; 3
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_SetPinValue>
	
	LCD_DATA_PORT= (CMD << 4) | (LCD_DATA_PORT & 0x0F) ;
 43e:	20 e1       	ldi	r18, 0x10	; 16
 440:	c2 9f       	mul	r28, r18
 442:	c0 01       	movw	r24, r0
 444:	11 24       	eor	r1, r1
 446:	9b b3       	in	r25, 0x1b	; 27
 448:	9f 70       	andi	r25, 0x0F	; 15
 44a:	89 2b       	or	r24, r25
 44c:	8b bb       	out	0x1b, r24	; 27

	DIO_SetPinValue(LCD_CMD_PORT,E_PIN,LOW);
 44e:	40 e0       	ldi	r20, 0x00	; 0
 450:	63 e0       	ldi	r22, 0x03	; 3
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_SetPinValue>
 458:	8f e9       	ldi	r24, 0x9F	; 159
 45a:	9f e0       	ldi	r25, 0x0F	; 15
 45c:	01 97       	sbiw	r24, 0x01	; 1
 45e:	f1 f7       	brne	.-4      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 460:	00 c0       	rjmp	.+0      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 462:	00 00       	nop
	_delay_ms(1);
	
	
	
}
 464:	cf 91       	pop	r28
 466:	08 95       	ret

Disassembly of section .text.LCD_init:

00000264 <LCD_init>:


#include "LCD_int.h"

void LCD_init(){
	DIO_SetPinDir(LCD_CMD_PORT,RS_PIN,OUTPUT);
 264:	43 e0       	ldi	r20, 0x03	; 3
 266:	61 e0       	ldi	r22, 0x01	; 1
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	0e 94 58 00 	call	0xb0	; 0xb0 <__data_load_end>
	DIO_SetPinDir(LCD_CMD_PORT,RW_PIN,OUTPUT);
 26e:	43 e0       	ldi	r20, 0x03	; 3
 270:	62 e0       	ldi	r22, 0x02	; 2
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	0e 94 58 00 	call	0xb0	; 0xb0 <__data_load_end>
	DIO_SetPinDir(LCD_CMD_PORT,E_PIN,OUTPUT);
 278:	43 e0       	ldi	r20, 0x03	; 3
 27a:	63 e0       	ldi	r22, 0x03	; 3
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	0e 94 58 00 	call	0xb0	; 0xb0 <__data_load_end>
	DIO_SetPinDir(LCD_DATA_PORT,LCD_D4_Pin,OUTPUT);
 282:	8b b3       	in	r24, 0x1b	; 27
 284:	43 e0       	ldi	r20, 0x03	; 3
 286:	64 e0       	ldi	r22, 0x04	; 4
 288:	0e 94 58 00 	call	0xb0	; 0xb0 <__data_load_end>
	DIO_SetPinDir(LCD_DATA_PORT,LCD_D5_Pin,OUTPUT);
 28c:	8b b3       	in	r24, 0x1b	; 27
 28e:	43 e0       	ldi	r20, 0x03	; 3
 290:	65 e0       	ldi	r22, 0x05	; 5
 292:	0e 94 58 00 	call	0xb0	; 0xb0 <__data_load_end>
	DIO_SetPinDir(LCD_DATA_PORT,LCD_D6_Pin,OUTPUT);
 296:	8b b3       	in	r24, 0x1b	; 27
 298:	43 e0       	ldi	r20, 0x03	; 3
 29a:	66 e0       	ldi	r22, 0x06	; 6
 29c:	0e 94 58 00 	call	0xb0	; 0xb0 <__data_load_end>
	DIO_SetPinDir(LCD_DATA_PORT,LCD_D7_Pin,OUTPUT);
 2a0:	8b b3       	in	r24, 0x1b	; 27
 2a2:	43 e0       	ldi	r20, 0x03	; 3
 2a4:	67 e0       	ldi	r22, 0x07	; 7
 2a6:	0e 94 58 00 	call	0xb0	; 0xb0 <__data_load_end>
	LCD_Write_CMD(0x33);
 2aa:	83 e3       	ldi	r24, 0x33	; 51
 2ac:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_Write_CMD>
 2b0:	8f e9       	ldi	r24, 0x9F	; 159
 2b2:	9f e0       	ldi	r25, 0x0F	; 15
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <LCD_init+0x50>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <LCD_init+0x56>
 2ba:	00 00       	nop
	_delay_ms(1);
	LCD_Write_CMD(0x32);
 2bc:	82 e3       	ldi	r24, 0x32	; 50
 2be:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_Write_CMD>
 2c2:	8f e9       	ldi	r24, 0x9F	; 159
 2c4:	9f e0       	ldi	r25, 0x0F	; 15
 2c6:	01 97       	sbiw	r24, 0x01	; 1
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <LCD_init+0x62>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <LCD_init+0x68>
 2cc:	00 00       	nop
	_delay_ms(1);
	LCD_Write_CMD(CMD_LCD_4Bit_Mode_2_Line_5X8);
 2ce:	88 e2       	ldi	r24, 0x28	; 40
 2d0:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_Write_CMD>
 2d4:	8f e9       	ldi	r24, 0x9F	; 159
 2d6:	9f e0       	ldi	r25, 0x0F	; 15
 2d8:	01 97       	sbiw	r24, 0x01	; 1
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <LCD_init+0x74>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <LCD_init+0x7a>
 2de:	00 00       	nop
	_delay_ms(1);
	LCD_Write_CMD(CMD_Display_ON_Cursor_Blink_OFF);
 2e0:	8c e0       	ldi	r24, 0x0C	; 12
 2e2:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_Write_CMD>
 2e6:	8f e9       	ldi	r24, 0x9F	; 159
 2e8:	9f e0       	ldi	r25, 0x0F	; 15
 2ea:	01 97       	sbiw	r24, 0x01	; 1
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <LCD_init+0x86>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <LCD_init+0x8c>
 2f0:	00 00       	nop
	_delay_ms(1);
	LCD_Write_CMD(CMD_Clear_Display);
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_Write_CMD>
 2f8:	8f e3       	ldi	r24, 0x3F	; 63
 2fa:	9f e1       	ldi	r25, 0x1F	; 31
 2fc:	01 97       	sbiw	r24, 0x01	; 1
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <LCD_init+0x98>
 300:	00 c0       	rjmp	.+0      	; 0x302 <LCD_init+0x9e>
 302:	00 00       	nop
	_delay_ms(2);
	LCD_Write_CMD(CMD_Shift_Display_Left_Per_Read_Write);
 304:	87 e0       	ldi	r24, 0x07	; 7
 306:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_Write_CMD>
 30a:	8f e9       	ldi	r24, 0x9F	; 159
 30c:	9f e0       	ldi	r25, 0x0F	; 15
 30e:	01 97       	sbiw	r24, 0x01	; 1
 310:	f1 f7       	brne	.-4      	; 0x30e <LCD_init+0xaa>
 312:	00 c0       	rjmp	.+0      	; 0x314 <LCD_init+0xb0>
 314:	00 00       	nop
	_delay_ms(1);
	LCD_Write_CMD(CMD_Return_Home);
 316:	82 e0       	ldi	r24, 0x02	; 2
 318:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_Write_CMD>
 31c:	8f e3       	ldi	r24, 0x3F	; 63
 31e:	9f e1       	ldi	r25, 0x1F	; 31
 320:	01 97       	sbiw	r24, 0x01	; 1
 322:	f1 f7       	brne	.-4      	; 0x320 <LCD_init+0xbc>
 324:	00 c0       	rjmp	.+0      	; 0x326 <LCD_init+0xc2>
 326:	00 00       	nop
 328:	08 95       	ret

Disassembly of section .text.LCD_Write_CHAR:

00000468 <LCD_Write_CHAR>:

	}
	 
 }

void LCD_Write_CHAR(u8 Data){
 468:	cf 93       	push	r28
 46a:	c8 2f       	mov	r28, r24
	
	DIO_SetPinValue(LCD_CMD_PORT,RS_PIN,HIGH);
 46c:	41 e0       	ldi	r20, 0x01	; 1
 46e:	61 e0       	ldi	r22, 0x01	; 1
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_SetPinValue>
	
	DIO_SetPinValue(LCD_CMD_PORT,RW_PIN,LOW);
 476:	40 e0       	ldi	r20, 0x00	; 0
 478:	62 e0       	ldi	r22, 0x02	; 2
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_SetPinValue>
		

	DIO_SetPinValue(LCD_CMD_PORT,E_PIN,LOW);
 480:	40 e0       	ldi	r20, 0x00	; 0
 482:	63 e0       	ldi	r22, 0x03	; 3
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_SetPinValue>
 48a:	8f e9       	ldi	r24, 0x9F	; 159
 48c:	9f e0       	ldi	r25, 0x0F	; 15
 48e:	01 97       	sbiw	r24, 0x01	; 1
 490:	f1 f7       	brne	.-4      	; 0x48e <LCD_Write_CHAR+0x26>
 492:	00 c0       	rjmp	.+0      	; 0x494 <LCD_Write_CHAR+0x2c>
 494:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_CMD_PORT,E_PIN,HIGH);
 496:	41 e0       	ldi	r20, 0x01	; 1
 498:	63 e0       	ldi	r22, 0x03	; 3
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_SetPinValue>
	
	LCD_DATA_PORT= (Data & 0xF0) | (LCD_DATA_PORT & 0x0F) ;
 4a0:	8b b3       	in	r24, 0x1b	; 27
 4a2:	9c 2f       	mov	r25, r28
 4a4:	90 7f       	andi	r25, 0xF0	; 240
 4a6:	8f 70       	andi	r24, 0x0F	; 15
 4a8:	89 2b       	or	r24, r25
 4aa:	8b bb       	out	0x1b, r24	; 27

	DIO_SetPinValue(LCD_CMD_PORT,E_PIN,LOW);
 4ac:	40 e0       	ldi	r20, 0x00	; 0
 4ae:	63 e0       	ldi	r22, 0x03	; 3
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_SetPinValue>
 4b6:	8f e9       	ldi	r24, 0x9F	; 159
 4b8:	9f e0       	ldi	r25, 0x0F	; 15
 4ba:	01 97       	sbiw	r24, 0x01	; 1
 4bc:	f1 f7       	brne	.-4      	; 0x4ba <LCD_Write_CHAR+0x52>
 4be:	00 c0       	rjmp	.+0      	; 0x4c0 <LCD_Write_CHAR+0x58>
 4c0:	00 00       	nop
	
	_delay_ms(1);
	
	DIO_SetPinValue(LCD_CMD_PORT,E_PIN,HIGH);
 4c2:	41 e0       	ldi	r20, 0x01	; 1
 4c4:	63 e0       	ldi	r22, 0x03	; 3
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_SetPinValue>
	
	LCD_DATA_PORT= (Data << 4) | (LCD_DATA_PORT & 0x0F) ;
 4cc:	20 e1       	ldi	r18, 0x10	; 16
 4ce:	c2 9f       	mul	r28, r18
 4d0:	c0 01       	movw	r24, r0
 4d2:	11 24       	eor	r1, r1
 4d4:	9b b3       	in	r25, 0x1b	; 27
 4d6:	9f 70       	andi	r25, 0x0F	; 15
 4d8:	89 2b       	or	r24, r25
 4da:	8b bb       	out	0x1b, r24	; 27

	DIO_SetPinValue(LCD_CMD_PORT,E_PIN,LOW);
 4dc:	40 e0       	ldi	r20, 0x00	; 0
 4de:	63 e0       	ldi	r22, 0x03	; 3
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_SetPinValue>
 4e6:	8f e9       	ldi	r24, 0x9F	; 159
 4e8:	9f e0       	ldi	r25, 0x0F	; 15
 4ea:	01 97       	sbiw	r24, 0x01	; 1
 4ec:	f1 f7       	brne	.-4      	; 0x4ea <LCD_Write_CHAR+0x82>
 4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <LCD_Write_CHAR+0x88>
 4f0:	00 00       	nop
	_delay_ms(1);
	
	
	
 4f2:	cf 91       	pop	r28
 4f4:	08 95       	ret

Disassembly of section .text.main:

000005c2 <main>:



int main(void)
{
KP_init();
 5c2:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <KP_init>
LCD_init();	
 5c6:	0e 94 32 01 	call	0x264	; 0x264 <LCD_init>

	while(1)
	{
		
		u8 key = KP_GetKey();
 5ca:	0e 94 95 01 	call	0x32a	; 0x32a <KP_GetKey>
		
		if (key != NO_KEY)
 5ce:	84 32       	cpi	r24, 0x24	; 36
 5d0:	e1 f3       	breq	.-8      	; 0x5ca <main+0x8>
		{
			LCD_Write_CHAR(key);
 5d2:	0e 94 34 02 	call	0x468	; 0x468 <LCD_Write_CHAR>
 5d6:	2f ef       	ldi	r18, 0xFF	; 255
 5d8:	83 ec       	ldi	r24, 0xC3	; 195
 5da:	99 e0       	ldi	r25, 0x09	; 9
 5dc:	21 50       	subi	r18, 0x01	; 1
 5de:	80 40       	sbci	r24, 0x00	; 0
 5e0:	90 40       	sbci	r25, 0x00	; 0
 5e2:	e1 f7       	brne	.-8      	; 0x5dc <main+0x1a>
 5e4:	00 c0       	rjmp	.+0      	; 0x5e6 <main+0x24>
 5e6:	00 00       	nop
 5e8:	f0 cf       	rjmp	.-32     	; 0x5ca <main+0x8>

Disassembly of section .text.DIO_SetPinDir:

000000b0 <DIO_SetPinDir>:

#include "DIO_int.h"

void DIO_SetPinDir(PORT_TYPE port ,PIN_TYPE pin, MODE_TYPE dir ){
	
	switch (port)
  b0:	81 30       	cpi	r24, 0x01	; 1
  b2:	01 f1       	breq	.+64     	; 0xf4 <DIO_SetPinDir+0x44>
  b4:	30 f0       	brcs	.+12     	; 0xc2 <DIO_SetPinDir+0x12>
  b6:	82 30       	cpi	r24, 0x02	; 2
  b8:	b1 f1       	breq	.+108    	; 0x126 <DIO_SetPinDir+0x76>
  ba:	83 30       	cpi	r24, 0x03	; 3
  bc:	09 f4       	brne	.+2      	; 0xc0 <DIO_SetPinDir+0x10>
  be:	4c c0       	rjmp	.+152    	; 0x158 <DIO_SetPinDir+0xa8>
  c0:	08 95       	ret
	{
		
		case DIO_PORTA:
		(dir==OUTPUT)? (SET_BIT(DDRA,pin)):(CLEAR_BIT(DDRA,pin)) ;
  c2:	43 30       	cpi	r20, 0x03	; 3
  c4:	59 f4       	brne	.+22     	; 0xdc <DIO_SetPinDir+0x2c>
  c6:	2a b3       	in	r18, 0x1a	; 26
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <DIO_SetPinDir+0x22>
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	6a 95       	dec	r22
  d4:	e2 f7       	brpl	.-8      	; 0xce <DIO_SetPinDir+0x1e>
  d6:	82 2b       	or	r24, r18
  d8:	8a bb       	out	0x1a, r24	; 26
  da:	08 95       	ret
  dc:	2a b3       	in	r18, 0x1a	; 26
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_SetPinDir+0x38>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	6a 95       	dec	r22
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_SetPinDir+0x34>
  ec:	80 95       	com	r24
  ee:	82 23       	and	r24, r18
  f0:	8a bb       	out	0x1a, r24	; 26
  f2:	08 95       	ret
		break;
		
		case DIO_PORTB:
		(dir==OUTPUT)? (SET_BIT(DDRB,pin)):(CLEAR_BIT(DDRB,pin)) ;
  f4:	43 30       	cpi	r20, 0x03	; 3
  f6:	59 f4       	brne	.+22     	; 0x10e <DIO_SetPinDir+0x5e>
  f8:	27 b3       	in	r18, 0x17	; 23
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_SetPinDir+0x54>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	6a 95       	dec	r22
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_SetPinDir+0x50>
 108:	82 2b       	or	r24, r18
 10a:	87 bb       	out	0x17, r24	; 23
 10c:	08 95       	ret
 10e:	27 b3       	in	r18, 0x17	; 23
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	02 c0       	rjmp	.+4      	; 0x11a <DIO_SetPinDir+0x6a>
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	6a 95       	dec	r22
 11c:	e2 f7       	brpl	.-8      	; 0x116 <DIO_SetPinDir+0x66>
 11e:	80 95       	com	r24
 120:	82 23       	and	r24, r18
 122:	87 bb       	out	0x17, r24	; 23
 124:	08 95       	ret
		break;
		
		case DIO_PORTC:
		(dir==OUTPUT)? (SET_BIT(DDRC,pin)):(CLEAR_BIT(DDRC,pin)) ;
 126:	43 30       	cpi	r20, 0x03	; 3
 128:	59 f4       	brne	.+22     	; 0x140 <DIO_SetPinDir+0x90>
 12a:	24 b3       	in	r18, 0x14	; 20
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_SetPinDir+0x86>
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	6a 95       	dec	r22
 138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_SetPinDir+0x82>
 13a:	82 2b       	or	r24, r18
 13c:	84 bb       	out	0x14, r24	; 20
 13e:	08 95       	ret
 140:	24 b3       	in	r18, 0x14	; 20
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_SetPinDir+0x9c>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_SetPinDir+0x98>
 150:	80 95       	com	r24
 152:	82 23       	and	r24, r18
 154:	84 bb       	out	0x14, r24	; 20
 156:	08 95       	ret
		break;
		
		case DIO_PORTD:
		(dir==OUTPUT)? (SET_BIT(DDRD,pin)):(CLEAR_BIT(DDRD,pin)) ;
 158:	43 30       	cpi	r20, 0x03	; 3
 15a:	59 f4       	brne	.+22     	; 0x172 <DIO_SetPinDir+0xc2>
 15c:	21 b3       	in	r18, 0x11	; 17
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	02 c0       	rjmp	.+4      	; 0x168 <DIO_SetPinDir+0xb8>
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	6a 95       	dec	r22
 16a:	e2 f7       	brpl	.-8      	; 0x164 <DIO_SetPinDir+0xb4>
 16c:	82 2b       	or	r24, r18
 16e:	81 bb       	out	0x11, r24	; 17
 170:	08 95       	ret
 172:	21 b3       	in	r18, 0x11	; 17
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	02 c0       	rjmp	.+4      	; 0x17e <DIO_SetPinDir+0xce>
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	6a 95       	dec	r22
 180:	e2 f7       	brpl	.-8      	; 0x17a <DIO_SetPinDir+0xca>
 182:	80 95       	com	r24
 184:	82 23       	and	r24, r18
 186:	81 bb       	out	0x11, r24	; 17
 188:	08 95       	ret

Disassembly of section .text.DIO_SetPinValue:

0000018a <DIO_SetPinValue>:
	
	
}
void DIO_SetPinValue(PORT_TYPE port ,PIN_TYPE pin , MODE_TYPE val )
{
	switch (port)
 18a:	81 30       	cpi	r24, 0x01	; 1
 18c:	01 f1       	breq	.+64     	; 0x1ce <DIO_SetPinValue+0x44>
 18e:	30 f0       	brcs	.+12     	; 0x19c <DIO_SetPinValue+0x12>
 190:	82 30       	cpi	r24, 0x02	; 2
 192:	b1 f1       	breq	.+108    	; 0x200 <DIO_SetPinValue+0x76>
 194:	83 30       	cpi	r24, 0x03	; 3
 196:	09 f4       	brne	.+2      	; 0x19a <DIO_SetPinValue+0x10>
 198:	4c c0       	rjmp	.+152    	; 0x232 <DIO_SetPinValue+0xa8>
 19a:	08 95       	ret
	{
		case DIO_PORTA:
		(val==HIGH)? (SET_BIT(PORTA,pin)):(CLEAR_BIT(PORTA,pin)) ;
 19c:	41 30       	cpi	r20, 0x01	; 1
 19e:	59 f4       	brne	.+22     	; 0x1b6 <DIO_SetPinValue+0x2c>
 1a0:	2b b3       	in	r18, 0x1b	; 27
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <DIO_SetPinValue+0x22>
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	6a 95       	dec	r22
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <DIO_SetPinValue+0x1e>
 1b0:	82 2b       	or	r24, r18
 1b2:	8b bb       	out	0x1b, r24	; 27
 1b4:	08 95       	ret
 1b6:	2b b3       	in	r18, 0x1b	; 27
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_SetPinValue+0x38>
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	6a 95       	dec	r22
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_SetPinValue+0x34>
 1c6:	80 95       	com	r24
 1c8:	82 23       	and	r24, r18
 1ca:	8b bb       	out	0x1b, r24	; 27
 1cc:	08 95       	ret
		break;
		
		case DIO_PORTB:
		(val==HIGH)? (SET_BIT(PORTB,pin)):(CLEAR_BIT(PORTB,pin)) ;
 1ce:	41 30       	cpi	r20, 0x01	; 1
 1d0:	59 f4       	brne	.+22     	; 0x1e8 <DIO_SetPinValue+0x5e>
 1d2:	28 b3       	in	r18, 0x18	; 24
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <DIO_SetPinValue+0x54>
 1da:	88 0f       	add	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	6a 95       	dec	r22
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <DIO_SetPinValue+0x50>
 1e2:	82 2b       	or	r24, r18
 1e4:	88 bb       	out	0x18, r24	; 24
 1e6:	08 95       	ret
 1e8:	28 b3       	in	r18, 0x18	; 24
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <DIO_SetPinValue+0x6a>
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	6a 95       	dec	r22
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <DIO_SetPinValue+0x66>
 1f8:	80 95       	com	r24
 1fa:	82 23       	and	r24, r18
 1fc:	88 bb       	out	0x18, r24	; 24
 1fe:	08 95       	ret
		break;
		
		case DIO_PORTC:
		(val==HIGH)? (SET_BIT(PORTC,pin)):(CLEAR_BIT(PORTC,pin)) ;
 200:	41 30       	cpi	r20, 0x01	; 1
 202:	59 f4       	brne	.+22     	; 0x21a <DIO_SetPinValue+0x90>
 204:	25 b3       	in	r18, 0x15	; 21
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_SetPinValue+0x86>
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	6a 95       	dec	r22
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_SetPinValue+0x82>
 214:	82 2b       	or	r24, r18
 216:	85 bb       	out	0x15, r24	; 21
 218:	08 95       	ret
 21a:	25 b3       	in	r18, 0x15	; 21
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	02 c0       	rjmp	.+4      	; 0x226 <DIO_SetPinValue+0x9c>
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	6a 95       	dec	r22
 228:	e2 f7       	brpl	.-8      	; 0x222 <DIO_SetPinValue+0x98>
 22a:	80 95       	com	r24
 22c:	82 23       	and	r24, r18
 22e:	85 bb       	out	0x15, r24	; 21
 230:	08 95       	ret
		break;
		
		case DIO_PORTD:
		(val==HIGH)? (SET_BIT(PORTD,pin)):(CLEAR_BIT(PORTD,pin)) ;
 232:	41 30       	cpi	r20, 0x01	; 1
 234:	59 f4       	brne	.+22     	; 0x24c <DIO_SetPinValue+0xc2>
 236:	22 b3       	in	r18, 0x12	; 18
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	02 c0       	rjmp	.+4      	; 0x242 <DIO_SetPinValue+0xb8>
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	6a 95       	dec	r22
 244:	e2 f7       	brpl	.-8      	; 0x23e <DIO_SetPinValue+0xb4>
 246:	82 2b       	or	r24, r18
 248:	82 bb       	out	0x12, r24	; 18
 24a:	08 95       	ret
 24c:	22 b3       	in	r18, 0x12	; 18
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	02 c0       	rjmp	.+4      	; 0x258 <DIO_SetPinValue+0xce>
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	6a 95       	dec	r22
 25a:	e2 f7       	brpl	.-8      	; 0x254 <DIO_SetPinValue+0xca>
 25c:	80 95       	com	r24
 25e:	82 23       	and	r24, r18
 260:	82 bb       	out	0x12, r24	; 18
 262:	08 95       	ret

Disassembly of section .text.DIO_GetPinValue:

00000568 <DIO_GetPinValue>:
	}
}

u8  DIO_GetPinValue(PORT_TYPE port ,PIN_TYPE pin  )	{
	
	switch(port){
 568:	81 30       	cpi	r24, 0x01	; 1
 56a:	79 f0       	breq	.+30     	; 0x58a <DIO_GetPinValue+0x22>
 56c:	28 f0       	brcs	.+10     	; 0x578 <DIO_GetPinValue+0x10>
 56e:	82 30       	cpi	r24, 0x02	; 2
 570:	a9 f0       	breq	.+42     	; 0x59c <DIO_GetPinValue+0x34>
 572:	83 30       	cpi	r24, 0x03	; 3
 574:	e1 f0       	breq	.+56     	; 0x5ae <DIO_GetPinValue+0x46>
 576:	24 c0       	rjmp	.+72     	; 0x5c0 <DIO_GetPinValue+0x58>
		
		case  DIO_PORTA :	return GET_BIT(PINA,pin);
 578:	89 b3       	in	r24, 0x19	; 25
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	02 c0       	rjmp	.+4      	; 0x582 <DIO_GetPinValue+0x1a>
 57e:	95 95       	asr	r25
 580:	87 95       	ror	r24
 582:	6a 95       	dec	r22
 584:	e2 f7       	brpl	.-8      	; 0x57e <DIO_GetPinValue+0x16>
 586:	81 70       	andi	r24, 0x01	; 1
 588:	08 95       	ret
		case  DIO_PORTB :   return GET_BIT(PINB,pin);
 58a:	86 b3       	in	r24, 0x16	; 22
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	02 c0       	rjmp	.+4      	; 0x594 <DIO_GetPinValue+0x2c>
 590:	95 95       	asr	r25
 592:	87 95       	ror	r24
 594:	6a 95       	dec	r22
 596:	e2 f7       	brpl	.-8      	; 0x590 <DIO_GetPinValue+0x28>
 598:	81 70       	andi	r24, 0x01	; 1
 59a:	08 95       	ret
		case  DIO_PORTC :   return GET_BIT(PINC,pin);
 59c:	83 b3       	in	r24, 0x13	; 19
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <DIO_GetPinValue+0x3e>
 5a2:	95 95       	asr	r25
 5a4:	87 95       	ror	r24
 5a6:	6a 95       	dec	r22
 5a8:	e2 f7       	brpl	.-8      	; 0x5a2 <DIO_GetPinValue+0x3a>
 5aa:	81 70       	andi	r24, 0x01	; 1
 5ac:	08 95       	ret
		case  DIO_PORTD :   return GET_BIT(PIND,pin);
 5ae:	80 b3       	in	r24, 0x10	; 16
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <DIO_GetPinValue+0x50>
 5b4:	95 95       	asr	r25
 5b6:	87 95       	ror	r24
 5b8:	6a 95       	dec	r22
 5ba:	e2 f7       	brpl	.-8      	; 0x5b4 <DIO_GetPinValue+0x4c>
 5bc:	81 70       	andi	r24, 0x01	; 1
 5be:	08 95       	ret
		
		
	}
	
	
}
 5c0:	08 95       	ret

Disassembly of section .text.DIO_SetInputPullUp:

000005ea <DIO_SetInputPullUp>:



void DIO_SetInputPullUp(PORT_TYPE port ,PIN_TYPE pin){
 5ea:	cf 93       	push	r28
 5ec:	df 93       	push	r29
 5ee:	c8 2f       	mov	r28, r24
 5f0:	d6 2f       	mov	r29, r22
	
	DIO_SetPinDir(port,pin,INPUT);
 5f2:	42 e0       	ldi	r20, 0x02	; 2
 5f4:	0e 94 58 00 	call	0xb0	; 0xb0 <__data_load_end>
	DIO_SetPinValue(port,pin,HIGH);
 5f8:	41 e0       	ldi	r20, 0x01	; 1
 5fa:	6d 2f       	mov	r22, r29
 5fc:	8c 2f       	mov	r24, r28
 5fe:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_SetPinValue>
	
}
 602:	df 91       	pop	r29
 604:	cf 91       	pop	r28
 606:	08 95       	ret
