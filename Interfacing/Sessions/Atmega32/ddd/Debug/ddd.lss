
ddd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000140  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000140  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  0000016f  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000017d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000080d  00000000  00000000  0000019d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000056a  00000000  00000000  000009aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000021c  00000000  00000000  00000f14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001130  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  00001154  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000012ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000000be  000000be  00000132  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000012fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.main    0000003c  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.__dummy_fini 00000002  000000c6  000000c6  0000013a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__dummy_funcs_on_exit 00000002  000000c8  000000c8  0000013c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_simulator_exit 00000002  000000ca  000000ca  0000013e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.exit    00000016  000000a8  000000a8  0000011c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text._Exit   00000004  000000c2  000000c2  00000136  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
   8:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
   c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  10:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  14:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  18:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  1c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  20:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  24:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  28:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  2c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  30:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  34:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  38:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  3c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  40:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  44:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  48:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  4c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  50:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
  64:	0c 94 54 00 	jmp	0xa8	; 0xa8 <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

000000be <__bad_interrupt>:
  be:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

0000006c <main>:
#define LED2_PORT  PORTD
#define LED2_PIN     3

int main(void)
{
LED0_DDR |= 1<<LED0_PIN; // led0 pin is output pin
  6c:	84 b3       	in	r24, 0x14	; 20
  6e:	84 60       	ori	r24, 0x04	; 4
  70:	84 bb       	out	0x14, r24	; 20

LED1_DDR |= 1<<LED1_PIN; // led0 pin is output pin
  72:	84 b3       	in	r24, 0x14	; 20
  74:	80 68       	ori	r24, 0x80	; 128
  76:	84 bb       	out	0x14, r24	; 20
LED2_DDR |= 1<<LED2_PIN; // led0 pin is output pin
  78:	81 b3       	in	r24, 0x11	; 17
  7a:	88 60       	ori	r24, 0x08	; 8
  7c:	81 bb       	out	0x11, r24	; 17
	
    while(1)
    {
LED0_PORT ^= 1<<LED0_PIN ; // define value of pin as HIGH 
  7e:	95 b3       	in	r25, 0x15	; 21
  80:	84 e0       	ldi	r24, 0x04	; 4
  82:	89 27       	eor	r24, r25
  84:	85 bb       	out	0x15, r24	; 21
LED1_PORT ^= 1<<LED1_PIN ; // define value of pin as HIGH
  86:	85 b3       	in	r24, 0x15	; 21
  88:	80 58       	subi	r24, 0x80	; 128
  8a:	85 bb       	out	0x15, r24	; 21
LED2_PORT ^= 1<<LED2_PIN ; // define value of pin as HIGH
  8c:	92 b3       	in	r25, 0x12	; 18
  8e:	88 e0       	ldi	r24, 0x08	; 8
  90:	89 27       	eor	r24, r25
  92:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	2f ef       	ldi	r18, 0xFF	; 255
  96:	84 e3       	ldi	r24, 0x34	; 52
  98:	9c e0       	ldi	r25, 0x0C	; 12
  9a:	21 50       	subi	r18, 0x01	; 1
  9c:	80 40       	sbci	r24, 0x00	; 0
  9e:	90 40       	sbci	r25, 0x00	; 0
  a0:	e1 f7       	brne	.-8      	; 0x9a <main+0x2e>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <main+0x38>
  a4:	00 00       	nop
  a6:	eb cf       	rjmp	.-42     	; 0x7e <main+0x12>

Disassembly of section .text.__dummy_fini:

000000c6 <_fini>:
  c6:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000000c8 <__funcs_on_exit>:
  c8:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000000ca <__simulator_exit>:
  ca:	08 95       	ret

Disassembly of section .text.exit:

000000a8 <exit>:
  a8:	ec 01       	movw	r28, r24
  aa:	0e 94 64 00 	call	0xc8	; 0xc8 <__funcs_on_exit>
  ae:	0e 94 63 00 	call	0xc6	; 0xc6 <_fini>
  b2:	ce 01       	movw	r24, r28
  b4:	0e 94 65 00 	call	0xca	; 0xca <__simulator_exit>
  b8:	ce 01       	movw	r24, r28
  ba:	0e 94 61 00 	call	0xc2	; 0xc2 <_Exit>

Disassembly of section .text._Exit:

000000c2 <_Exit>:
  c2:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
