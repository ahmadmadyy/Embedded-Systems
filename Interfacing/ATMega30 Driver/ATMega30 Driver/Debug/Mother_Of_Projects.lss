
Mother_Of_Projects.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000100a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000078  00800060  0000100a  0000109e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000024  008000d8  008000d8  00001116  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001116  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001148  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  00001184  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022c4  00000000  00000000  000013cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ca7  00000000  00000000  00003690  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012f9  00000000  00000000  00004337  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000698  00000000  00000000  00005630  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000078a  00000000  00000000  00005cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001748  00000000  00000000  00006452  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  00007b9a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__vector_4>
      14:	0c 94 08 07 	jmp	0xe10	; 0xe10 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__vector_9>
      28:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e0       	ldi	r30, 0x0A	; 10
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 3d       	cpi	r26, 0xD8	; 216
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a8 ed       	ldi	r26, 0xD8	; 216
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3f       	cpi	r26, 0xFC	; 252
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0a 05 	call	0xa14	; 0xa14 <main>
      8a:	0c 94 03 08 	jmp	0x1006	; 0x1006 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_INIT>:
#include "ADC.h"

void ADC_INIT(void)
{
	/*Voltage Reference*/
	ADMUX = (ADC_SOURCE << 6) | (ADMUX & 0x3F);
      92:	87 b1       	in	r24, 0x07	; 7
      94:	8f 73       	andi	r24, 0x3F	; 63
      96:	80 64       	ori	r24, 0x40	; 64
      98:	87 b9       	out	0x07, r24	; 7
	/*Right ADJUST*/
	Clear_Bit(ADMUX, 5);
      9a:	3d 98       	cbi	0x07, 5	; 7
	/*128 Prescaler*/
	ADCSRA = 0x07;	
      9c:	87 e0       	ldi	r24, 0x07	; 7
      9e:	86 b9       	out	0x06, r24	; 6
	/*Conversion Mode: AutoTrigger/FreeRunning*/
	Set_Bit(ADCSRA, 5);
      a0:	35 9a       	sbi	0x06, 5	; 6
	SFIOR = (AUTO_TRIGGER_MODE << 5) | (SFIOR & 0x1F);
      a2:	80 b7       	in	r24, 0x30	; 48
      a4:	8f 71       	andi	r24, 0x1F	; 31
      a6:	80 bf       	out	0x30, r24	; 48
	/*ADC peripheral Enable*/
	Set_Bit(ADCSRA, 7);
      a8:	37 9a       	sbi	0x06, 7	; 6
      aa:	08 95       	ret

000000ac <ADC_Read>:
}
Uint16 ADC_Read(Uint8 ADC_pin)
{
	/*Channel select*/
	ADMUX = ADC_pin | (ADMUX & 0xE0);
      ac:	97 b1       	in	r25, 0x07	; 7
      ae:	90 7e       	andi	r25, 0xE0	; 224
      b0:	89 2b       	or	r24, r25
      b2:	87 b9       	out	0x07, r24	; 7
	/*Start of conversion*/
	Set_Bit(ADCSRA, 6);
      b4:	36 9a       	sbi	0x06, 6	; 6
	/*End of conversion Polling*/
	while(Get_Bit(ADCSRA, 4) == 0);
      b6:	34 9b       	sbis	0x06, 4	; 6
      b8:	fe cf       	rjmp	.-4      	; 0xb6 <ADC_Read+0xa>
	/*Converted digital output*/
	Uint16 DigitalOutput = ADCRA;
      ba:	84 b1       	in	r24, 0x04	; 4
      bc:	95 b1       	in	r25, 0x05	; 5
	return DigitalOutput;
}
      be:	08 95       	ret

000000c0 <RELAY>:


void RELAY(Uint8 state){
	

	DIO_SetPinVal(DIO_PORTA, RELAY_PIN , state);
      c0:	48 2f       	mov	r20, r24
      c2:	62 e0       	ldi	r22, 0x02	; 2
      c4:	80 e0       	ldi	r24, 0x00	; 0
      c6:	0e 94 71 01 	call	0x2e2	; 0x2e2 <DIO_SetPinVal>
      ca:	08 95       	ret

000000cc <LIGHT_INIT>:


void LIGHT_INIT(){
	

	DIO_SetPinDir(DIO_PORTD, DIO_PIN_3 , DIO_PIN_OUT);
      cc:	4f ef       	ldi	r20, 0xFF	; 255
      ce:	63 e0       	ldi	r22, 0x03	; 3
      d0:	83 e0       	ldi	r24, 0x03	; 3
      d2:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_SetPinDir>
	DIO_SetPinDir(DIO_PORTC, DIO_PIN_2 , DIO_PIN_OUT);
      d6:	4f ef       	ldi	r20, 0xFF	; 255
      d8:	62 e0       	ldi	r22, 0x02	; 2
      da:	82 e0       	ldi	r24, 0x02	; 2
      dc:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_SetPinDir>
	DIO_SetPinDir(DIO_PORTC, DIO_PIN_7 , DIO_PIN_OUT);
      e0:	4f ef       	ldi	r20, 0xFF	; 255
      e2:	67 e0       	ldi	r22, 0x07	; 7
      e4:	82 e0       	ldi	r24, 0x02	; 2
      e6:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_SetPinDir>
      ea:	08 95       	ret

000000ec <LIGHT>:
	
}
void LIGHT(Uint8 state){
      ec:	cf 93       	push	r28
      ee:	c8 2f       	mov	r28, r24

	DIO_SetPinVal(DIO_PORTD, DIO_PIN_3 , state);
      f0:	48 2f       	mov	r20, r24
      f2:	63 e0       	ldi	r22, 0x03	; 3
      f4:	83 e0       	ldi	r24, 0x03	; 3
      f6:	0e 94 71 01 	call	0x2e2	; 0x2e2 <DIO_SetPinVal>
	DIO_SetPinVal(DIO_PORTC, DIO_PIN_2 , state);
      fa:	4c 2f       	mov	r20, r28
      fc:	62 e0       	ldi	r22, 0x02	; 2
      fe:	82 e0       	ldi	r24, 0x02	; 2
     100:	0e 94 71 01 	call	0x2e2	; 0x2e2 <DIO_SetPinVal>
	DIO_SetPinVal(DIO_PORTC, DIO_PIN_7 , state);
     104:	4c 2f       	mov	r20, r28
     106:	67 e0       	ldi	r22, 0x07	; 7
     108:	82 e0       	ldi	r24, 0x02	; 2
     10a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <DIO_SetPinVal>

}
     10e:	cf 91       	pop	r28
     110:	08 95       	ret

00000112 <DOOR>:


void DOOR(Uint8 state){
	
	if(state==CLS){
     112:	81 30       	cpi	r24, 0x01	; 1
     114:	21 f4       	brne	.+8      	; 0x11e <DOOR+0xc>
		
	Servo(90);
     116:	8a e5       	ldi	r24, 0x5A	; 90
     118:	0e 94 f6 05 	call	0xbec	; 0xbec <Servo>
     11c:	08 95       	ret
			
		
	}
	else if(state==OPN){
     11e:	81 11       	cpse	r24, r1
     120:	02 c0       	rjmp	.+4      	; 0x126 <DOOR+0x14>
	Servo(0); 
     122:	0e 94 f6 05 	call	0xbec	; 0xbec <Servo>
     126:	08 95       	ret

00000128 <TEMP_READ>:
	}
}

Uint8 TEMP_READ(){
	
	 Sensor_read += ADC_Read(ADC_PIN_0)/3;
     128:	80 e0       	ldi	r24, 0x00	; 0
     12a:	0e 94 56 00 	call	0xac	; 0xac <ADC_Read>
     12e:	9c 01       	movw	r18, r24
     130:	ab ea       	ldi	r26, 0xAB	; 171
     132:	ba ea       	ldi	r27, 0xAA	; 170
     134:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <__umulhisi3>
     138:	96 95       	lsr	r25
     13a:	87 95       	ror	r24
     13c:	90 91 d8 00 	lds	r25, 0x00D8	; 0x8000d8 <__data_end>
     140:	89 0f       	add	r24, r25
     142:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__data_end>
	 Sensor_read += ADC_Read(ADC_PIN_0)/3;
     146:	80 e0       	ldi	r24, 0x00	; 0
     148:	0e 94 56 00 	call	0xac	; 0xac <ADC_Read>
     14c:	9c 01       	movw	r18, r24
     14e:	ab ea       	ldi	r26, 0xAB	; 171
     150:	ba ea       	ldi	r27, 0xAA	; 170
     152:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <__umulhisi3>
     156:	96 95       	lsr	r25
     158:	87 95       	ror	r24
     15a:	90 91 d8 00 	lds	r25, 0x00D8	; 0x8000d8 <__data_end>
     15e:	89 0f       	add	r24, r25
     160:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__data_end>
	 Sensor_read += ADC_Read(ADC_PIN_0)/3;
     164:	80 e0       	ldi	r24, 0x00	; 0
     166:	0e 94 56 00 	call	0xac	; 0xac <ADC_Read>
     16a:	9c 01       	movw	r18, r24
     16c:	ab ea       	ldi	r26, 0xAB	; 171
     16e:	ba ea       	ldi	r27, 0xAA	; 170
     170:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <__umulhisi3>
     174:	96 95       	lsr	r25
     176:	87 95       	ror	r24
     178:	90 91 d8 00 	lds	r25, 0x00D8	; 0x8000d8 <__data_end>
     17c:	89 0f       	add	r24, r25
     17e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__data_end>
	 Sensor_read += ADC_Read(ADC_PIN_0)/3;
     182:	80 e0       	ldi	r24, 0x00	; 0
     184:	0e 94 56 00 	call	0xac	; 0xac <ADC_Read>
	 Sensor_read/=5;
     188:	9c 01       	movw	r18, r24
     18a:	ab ea       	ldi	r26, 0xAB	; 171
     18c:	ba ea       	ldi	r27, 0xAA	; 170
     18e:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <__umulhisi3>
     192:	96 95       	lsr	r25
     194:	87 95       	ror	r24
     196:	90 91 d8 00 	lds	r25, 0x00D8	; 0x8000d8 <__data_end>
     19a:	89 0f       	add	r24, r25
     19c:	9d ec       	ldi	r25, 0xCD	; 205
     19e:	89 9f       	mul	r24, r25
     1a0:	81 2d       	mov	r24, r1
     1a2:	11 24       	eor	r1, r1
     1a4:	86 95       	lsr	r24
     1a6:	86 95       	lsr	r24
     1a8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__data_end>
	
	return Sensor_read;
     1ac:	08 95       	ret

000001ae <DIO_SetPinDir>:
			break;		
			default:   //MISRA C rules
			break;										
		}	
	}
}
     1ae:	44 23       	and	r20, r20
     1b0:	21 f0       	breq	.+8      	; 0x1ba <DIO_SetPinDir+0xc>
     1b2:	4f 3f       	cpi	r20, 0xFF	; 255
     1b4:	09 f4       	brne	.+2      	; 0x1b8 <DIO_SetPinDir+0xa>
     1b6:	4b c0       	rjmp	.+150    	; 0x24e <DIO_SetPinDir+0xa0>
     1b8:	08 95       	ret
     1ba:	68 30       	cpi	r22, 0x08	; 8
     1bc:	c0 f5       	brcc	.+112    	; 0x22e <DIO_SetPinDir+0x80>
     1be:	81 30       	cpi	r24, 0x01	; 1
     1c0:	91 f0       	breq	.+36     	; 0x1e6 <DIO_SetPinDir+0x38>
     1c2:	28 f0       	brcs	.+10     	; 0x1ce <DIO_SetPinDir+0x20>
     1c4:	82 30       	cpi	r24, 0x02	; 2
     1c6:	d9 f0       	breq	.+54     	; 0x1fe <DIO_SetPinDir+0x50>
     1c8:	83 30       	cpi	r24, 0x03	; 3
     1ca:	29 f1       	breq	.+74     	; 0x216 <DIO_SetPinDir+0x68>
     1cc:	08 95       	ret
     1ce:	2a b3       	in	r18, 0x1a	; 26
     1d0:	81 e0       	ldi	r24, 0x01	; 1
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	02 c0       	rjmp	.+4      	; 0x1da <DIO_SetPinDir+0x2c>
     1d6:	88 0f       	add	r24, r24
     1d8:	99 1f       	adc	r25, r25
     1da:	6a 95       	dec	r22
     1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <DIO_SetPinDir+0x28>
     1de:	80 95       	com	r24
     1e0:	82 23       	and	r24, r18
     1e2:	8a bb       	out	0x1a, r24	; 26
     1e4:	08 95       	ret
     1e6:	27 b3       	in	r18, 0x17	; 23
     1e8:	81 e0       	ldi	r24, 0x01	; 1
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_SetPinDir+0x44>
     1ee:	88 0f       	add	r24, r24
     1f0:	99 1f       	adc	r25, r25
     1f2:	6a 95       	dec	r22
     1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_SetPinDir+0x40>
     1f6:	80 95       	com	r24
     1f8:	82 23       	and	r24, r18
     1fa:	87 bb       	out	0x17, r24	; 23
     1fc:	08 95       	ret
     1fe:	24 b3       	in	r18, 0x14	; 20
     200:	81 e0       	ldi	r24, 0x01	; 1
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_SetPinDir+0x5c>
     206:	88 0f       	add	r24, r24
     208:	99 1f       	adc	r25, r25
     20a:	6a 95       	dec	r22
     20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_SetPinDir+0x58>
     20e:	80 95       	com	r24
     210:	82 23       	and	r24, r18
     212:	84 bb       	out	0x14, r24	; 20
     214:	08 95       	ret
     216:	21 b3       	in	r18, 0x11	; 17
     218:	81 e0       	ldi	r24, 0x01	; 1
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_SetPinDir+0x74>
     21e:	88 0f       	add	r24, r24
     220:	99 1f       	adc	r25, r25
     222:	6a 95       	dec	r22
     224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_SetPinDir+0x70>
     226:	80 95       	com	r24
     228:	82 23       	and	r24, r18
     22a:	81 bb       	out	0x11, r24	; 17
     22c:	08 95       	ret
     22e:	81 30       	cpi	r24, 0x01	; 1
     230:	41 f0       	breq	.+16     	; 0x242 <DIO_SetPinDir+0x94>
     232:	28 f0       	brcs	.+10     	; 0x23e <DIO_SetPinDir+0x90>
     234:	82 30       	cpi	r24, 0x02	; 2
     236:	39 f0       	breq	.+14     	; 0x246 <DIO_SetPinDir+0x98>
     238:	83 30       	cpi	r24, 0x03	; 3
     23a:	39 f0       	breq	.+14     	; 0x24a <DIO_SetPinDir+0x9c>
     23c:	08 95       	ret
     23e:	1a ba       	out	0x1a, r1	; 26
     240:	08 95       	ret
     242:	17 ba       	out	0x17, r1	; 23
     244:	08 95       	ret
     246:	14 ba       	out	0x14, r1	; 20
     248:	08 95       	ret
     24a:	11 ba       	out	0x11, r1	; 17
     24c:	08 95       	ret
     24e:	68 30       	cpi	r22, 0x08	; 8
     250:	a0 f5       	brcc	.+104    	; 0x2ba <DIO_SetPinDir+0x10c>
     252:	81 30       	cpi	r24, 0x01	; 1
     254:	89 f0       	breq	.+34     	; 0x278 <DIO_SetPinDir+0xca>
     256:	28 f0       	brcs	.+10     	; 0x262 <DIO_SetPinDir+0xb4>
     258:	82 30       	cpi	r24, 0x02	; 2
     25a:	c9 f0       	breq	.+50     	; 0x28e <DIO_SetPinDir+0xe0>
     25c:	83 30       	cpi	r24, 0x03	; 3
     25e:	11 f1       	breq	.+68     	; 0x2a4 <DIO_SetPinDir+0xf6>
     260:	08 95       	ret
     262:	2a b3       	in	r18, 0x1a	; 26
     264:	81 e0       	ldi	r24, 0x01	; 1
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	02 c0       	rjmp	.+4      	; 0x26e <DIO_SetPinDir+0xc0>
     26a:	88 0f       	add	r24, r24
     26c:	99 1f       	adc	r25, r25
     26e:	6a 95       	dec	r22
     270:	e2 f7       	brpl	.-8      	; 0x26a <DIO_SetPinDir+0xbc>
     272:	82 2b       	or	r24, r18
     274:	8a bb       	out	0x1a, r24	; 26
     276:	08 95       	ret
     278:	27 b3       	in	r18, 0x17	; 23
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	02 c0       	rjmp	.+4      	; 0x284 <DIO_SetPinDir+0xd6>
     280:	88 0f       	add	r24, r24
     282:	99 1f       	adc	r25, r25
     284:	6a 95       	dec	r22
     286:	e2 f7       	brpl	.-8      	; 0x280 <DIO_SetPinDir+0xd2>
     288:	82 2b       	or	r24, r18
     28a:	87 bb       	out	0x17, r24	; 23
     28c:	08 95       	ret
     28e:	24 b3       	in	r18, 0x14	; 20
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_SetPinDir+0xec>
     296:	88 0f       	add	r24, r24
     298:	99 1f       	adc	r25, r25
     29a:	6a 95       	dec	r22
     29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_SetPinDir+0xe8>
     29e:	82 2b       	or	r24, r18
     2a0:	84 bb       	out	0x14, r24	; 20
     2a2:	08 95       	ret
     2a4:	21 b3       	in	r18, 0x11	; 17
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DIO_SetPinDir+0x102>
     2ac:	88 0f       	add	r24, r24
     2ae:	99 1f       	adc	r25, r25
     2b0:	6a 95       	dec	r22
     2b2:	e2 f7       	brpl	.-8      	; 0x2ac <DIO_SetPinDir+0xfe>
     2b4:	82 2b       	or	r24, r18
     2b6:	81 bb       	out	0x11, r24	; 17
     2b8:	08 95       	ret
     2ba:	81 30       	cpi	r24, 0x01	; 1
     2bc:	49 f0       	breq	.+18     	; 0x2d0 <DIO_SetPinDir+0x122>
     2be:	28 f0       	brcs	.+10     	; 0x2ca <DIO_SetPinDir+0x11c>
     2c0:	82 30       	cpi	r24, 0x02	; 2
     2c2:	49 f0       	breq	.+18     	; 0x2d6 <DIO_SetPinDir+0x128>
     2c4:	83 30       	cpi	r24, 0x03	; 3
     2c6:	51 f0       	breq	.+20     	; 0x2dc <DIO_SetPinDir+0x12e>
     2c8:	08 95       	ret
     2ca:	8f ef       	ldi	r24, 0xFF	; 255
     2cc:	8a bb       	out	0x1a, r24	; 26
     2ce:	08 95       	ret
     2d0:	8f ef       	ldi	r24, 0xFF	; 255
     2d2:	87 bb       	out	0x17, r24	; 23
     2d4:	08 95       	ret
     2d6:	8f ef       	ldi	r24, 0xFF	; 255
     2d8:	84 bb       	out	0x14, r24	; 20
     2da:	08 95       	ret
     2dc:	8f ef       	ldi	r24, 0xFF	; 255
     2de:	81 bb       	out	0x11, r24	; 17
     2e0:	08 95       	ret

000002e2 <DIO_SetPinVal>:
     2e2:	cf 93       	push	r28
     2e4:	df 93       	push	r29
     2e6:	c8 2f       	mov	r28, r24
     2e8:	d6 2f       	mov	r29, r22
     2ea:	44 23       	and	r20, r20
     2ec:	21 f0       	breq	.+8      	; 0x2f6 <DIO_SetPinVal+0x14>
     2ee:	4f 3f       	cpi	r20, 0xFF	; 255
     2f0:	09 f4       	brne	.+2      	; 0x2f4 <DIO_SetPinVal+0x12>
     2f2:	52 c0       	rjmp	.+164    	; 0x398 <DIO_SetPinVal+0xb6>
     2f4:	a1 c0       	rjmp	.+322    	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     2f6:	68 30       	cpi	r22, 0x08	; 8
     2f8:	d8 f5       	brcc	.+118    	; 0x370 <DIO_SetPinVal+0x8e>
     2fa:	4f ef       	ldi	r20, 0xFF	; 255
     2fc:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_SetPinDir>
     300:	c1 30       	cpi	r28, 0x01	; 1
     302:	91 f0       	breq	.+36     	; 0x328 <DIO_SetPinVal+0x46>
     304:	28 f0       	brcs	.+10     	; 0x310 <DIO_SetPinVal+0x2e>
     306:	c2 30       	cpi	r28, 0x02	; 2
     308:	d9 f0       	breq	.+54     	; 0x340 <DIO_SetPinVal+0x5e>
     30a:	c3 30       	cpi	r28, 0x03	; 3
     30c:	29 f1       	breq	.+74     	; 0x358 <DIO_SetPinVal+0x76>
     30e:	94 c0       	rjmp	.+296    	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     310:	2b b3       	in	r18, 0x1b	; 27
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	02 c0       	rjmp	.+4      	; 0x31c <DIO_SetPinVal+0x3a>
     318:	88 0f       	add	r24, r24
     31a:	99 1f       	adc	r25, r25
     31c:	da 95       	dec	r29
     31e:	e2 f7       	brpl	.-8      	; 0x318 <DIO_SetPinVal+0x36>
     320:	80 95       	com	r24
     322:	82 23       	and	r24, r18
     324:	8b bb       	out	0x1b, r24	; 27
     326:	88 c0       	rjmp	.+272    	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     328:	28 b3       	in	r18, 0x18	; 24
     32a:	81 e0       	ldi	r24, 0x01	; 1
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	02 c0       	rjmp	.+4      	; 0x334 <DIO_SetPinVal+0x52>
     330:	88 0f       	add	r24, r24
     332:	99 1f       	adc	r25, r25
     334:	da 95       	dec	r29
     336:	e2 f7       	brpl	.-8      	; 0x330 <DIO_SetPinVal+0x4e>
     338:	80 95       	com	r24
     33a:	82 23       	and	r24, r18
     33c:	88 bb       	out	0x18, r24	; 24
     33e:	7c c0       	rjmp	.+248    	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     340:	25 b3       	in	r18, 0x15	; 21
     342:	81 e0       	ldi	r24, 0x01	; 1
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	02 c0       	rjmp	.+4      	; 0x34c <DIO_SetPinVal+0x6a>
     348:	88 0f       	add	r24, r24
     34a:	99 1f       	adc	r25, r25
     34c:	da 95       	dec	r29
     34e:	e2 f7       	brpl	.-8      	; 0x348 <DIO_SetPinVal+0x66>
     350:	80 95       	com	r24
     352:	82 23       	and	r24, r18
     354:	85 bb       	out	0x15, r24	; 21
     356:	70 c0       	rjmp	.+224    	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     358:	22 b3       	in	r18, 0x12	; 18
     35a:	81 e0       	ldi	r24, 0x01	; 1
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	02 c0       	rjmp	.+4      	; 0x364 <DIO_SetPinVal+0x82>
     360:	88 0f       	add	r24, r24
     362:	99 1f       	adc	r25, r25
     364:	da 95       	dec	r29
     366:	e2 f7       	brpl	.-8      	; 0x360 <DIO_SetPinVal+0x7e>
     368:	80 95       	com	r24
     36a:	82 23       	and	r24, r18
     36c:	82 bb       	out	0x12, r24	; 18
     36e:	64 c0       	rjmp	.+200    	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     370:	4f ef       	ldi	r20, 0xFF	; 255
     372:	68 e0       	ldi	r22, 0x08	; 8
     374:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_SetPinDir>
     378:	c1 30       	cpi	r28, 0x01	; 1
     37a:	41 f0       	breq	.+16     	; 0x38c <DIO_SetPinVal+0xaa>
     37c:	28 f0       	brcs	.+10     	; 0x388 <DIO_SetPinVal+0xa6>
     37e:	c2 30       	cpi	r28, 0x02	; 2
     380:	39 f0       	breq	.+14     	; 0x390 <DIO_SetPinVal+0xae>
     382:	c3 30       	cpi	r28, 0x03	; 3
     384:	39 f0       	breq	.+14     	; 0x394 <DIO_SetPinVal+0xb2>
     386:	58 c0       	rjmp	.+176    	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     388:	1b ba       	out	0x1b, r1	; 27
     38a:	56 c0       	rjmp	.+172    	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     38c:	18 ba       	out	0x18, r1	; 24
     38e:	54 c0       	rjmp	.+168    	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     390:	15 ba       	out	0x15, r1	; 21
     392:	52 c0       	rjmp	.+164    	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     394:	12 ba       	out	0x12, r1	; 18
     396:	50 c0       	rjmp	.+160    	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     398:	68 30       	cpi	r22, 0x08	; 8
     39a:	b8 f5       	brcc	.+110    	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
     39c:	4f ef       	ldi	r20, 0xFF	; 255
     39e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_SetPinDir>
     3a2:	c1 30       	cpi	r28, 0x01	; 1
     3a4:	89 f0       	breq	.+34     	; 0x3c8 <DIO_SetPinVal+0xe6>
     3a6:	28 f0       	brcs	.+10     	; 0x3b2 <DIO_SetPinVal+0xd0>
     3a8:	c2 30       	cpi	r28, 0x02	; 2
     3aa:	c9 f0       	breq	.+50     	; 0x3de <DIO_SetPinVal+0xfc>
     3ac:	c3 30       	cpi	r28, 0x03	; 3
     3ae:	11 f1       	breq	.+68     	; 0x3f4 <DIO_SetPinVal+0x112>
     3b0:	43 c0       	rjmp	.+134    	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     3b2:	2b b3       	in	r18, 0x1b	; 27
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	02 c0       	rjmp	.+4      	; 0x3be <DIO_SetPinVal+0xdc>
     3ba:	88 0f       	add	r24, r24
     3bc:	99 1f       	adc	r25, r25
     3be:	da 95       	dec	r29
     3c0:	e2 f7       	brpl	.-8      	; 0x3ba <DIO_SetPinVal+0xd8>
     3c2:	82 2b       	or	r24, r18
     3c4:	8b bb       	out	0x1b, r24	; 27
     3c6:	38 c0       	rjmp	.+112    	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     3c8:	28 b3       	in	r18, 0x18	; 24
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <DIO_SetPinVal+0xf2>
     3d0:	88 0f       	add	r24, r24
     3d2:	99 1f       	adc	r25, r25
     3d4:	da 95       	dec	r29
     3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <DIO_SetPinVal+0xee>
     3d8:	82 2b       	or	r24, r18
     3da:	88 bb       	out	0x18, r24	; 24
     3dc:	2d c0       	rjmp	.+90     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     3de:	25 b3       	in	r18, 0x15	; 21
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	02 c0       	rjmp	.+4      	; 0x3ea <DIO_SetPinVal+0x108>
     3e6:	88 0f       	add	r24, r24
     3e8:	99 1f       	adc	r25, r25
     3ea:	da 95       	dec	r29
     3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <DIO_SetPinVal+0x104>
     3ee:	82 2b       	or	r24, r18
     3f0:	85 bb       	out	0x15, r24	; 21
     3f2:	22 c0       	rjmp	.+68     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     3f4:	22 b3       	in	r18, 0x12	; 18
     3f6:	81 e0       	ldi	r24, 0x01	; 1
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	02 c0       	rjmp	.+4      	; 0x400 <__EEPROM_REGION_LENGTH__>
     3fc:	88 0f       	add	r24, r24
     3fe:	99 1f       	adc	r25, r25
     400:	da 95       	dec	r29
     402:	e2 f7       	brpl	.-8      	; 0x3fc <DIO_SetPinVal+0x11a>
     404:	82 2b       	or	r24, r18
     406:	82 bb       	out	0x12, r24	; 18
     408:	17 c0       	rjmp	.+46     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     40a:	4f ef       	ldi	r20, 0xFF	; 255
     40c:	68 e0       	ldi	r22, 0x08	; 8
     40e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_SetPinDir>
     412:	c1 30       	cpi	r28, 0x01	; 1
     414:	49 f0       	breq	.+18     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
     416:	28 f0       	brcs	.+10     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
     418:	c2 30       	cpi	r28, 0x02	; 2
     41a:	49 f0       	breq	.+18     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
     41c:	c3 30       	cpi	r28, 0x03	; 3
     41e:	51 f0       	breq	.+20     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
     420:	0b c0       	rjmp	.+22     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     422:	8f ef       	ldi	r24, 0xFF	; 255
     424:	8b bb       	out	0x1b, r24	; 27
     426:	08 c0       	rjmp	.+16     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     428:	8f ef       	ldi	r24, 0xFF	; 255
     42a:	88 bb       	out	0x18, r24	; 24
     42c:	05 c0       	rjmp	.+10     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     42e:	8f ef       	ldi	r24, 0xFF	; 255
     430:	85 bb       	out	0x15, r24	; 21
     432:	02 c0       	rjmp	.+4      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     434:	8f ef       	ldi	r24, 0xFF	; 255
     436:	82 bb       	out	0x12, r24	; 18
     438:	df 91       	pop	r29
     43a:	cf 91       	pop	r28
     43c:	08 95       	ret

0000043e <DIO_GetPinVal>:
Uint8 DIO_GetPinVal(Uint8 port, Uint8 pin)
{
     43e:	cf 93       	push	r28
     440:	df 93       	push	r29
     442:	c8 2f       	mov	r28, r24
     444:	d6 2f       	mov	r29, r22
	Uint8 val = 0;
		if (pin >=0 && pin <=7)
     446:	68 30       	cpi	r22, 0x08	; 8
     448:	78 f5       	brcc	.+94     	; 0x4a8 <DIO_GetPinVal+0x6a>
		{
			DIO_SetPinDir(port, pin, DIO_PIN_IN);
     44a:	40 e0       	ldi	r20, 0x00	; 0
     44c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_SetPinDir>
			switch (port)
     450:	c1 30       	cpi	r28, 0x01	; 1
     452:	79 f0       	breq	.+30     	; 0x472 <DIO_GetPinVal+0x34>
     454:	28 f0       	brcs	.+10     	; 0x460 <DIO_GetPinVal+0x22>
     456:	c2 30       	cpi	r28, 0x02	; 2
     458:	a9 f0       	breq	.+42     	; 0x484 <DIO_GetPinVal+0x46>
     45a:	c3 30       	cpi	r28, 0x03	; 3
     45c:	e1 f0       	breq	.+56     	; 0x496 <DIO_GetPinVal+0x58>
     45e:	38 c0       	rjmp	.+112    	; 0x4d0 <DIO_GetPinVal+0x92>
			{
				case DIO_PORTA:
				val = Get_Bit(PINA, pin);
     460:	89 b3       	in	r24, 0x19	; 25
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	02 c0       	rjmp	.+4      	; 0x46a <DIO_GetPinVal+0x2c>
     466:	95 95       	asr	r25
     468:	87 95       	ror	r24
     46a:	da 95       	dec	r29
     46c:	e2 f7       	brpl	.-8      	; 0x466 <DIO_GetPinVal+0x28>
     46e:	81 70       	andi	r24, 0x01	; 1
				break;
     470:	32 c0       	rjmp	.+100    	; 0x4d6 <DIO_GetPinVal+0x98>
				case DIO_PORTB:
				val = Get_Bit(PINB, pin);
     472:	86 b3       	in	r24, 0x16	; 22
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	02 c0       	rjmp	.+4      	; 0x47c <DIO_GetPinVal+0x3e>
     478:	95 95       	asr	r25
     47a:	87 95       	ror	r24
     47c:	da 95       	dec	r29
     47e:	e2 f7       	brpl	.-8      	; 0x478 <DIO_GetPinVal+0x3a>
     480:	81 70       	andi	r24, 0x01	; 1
				break;
     482:	29 c0       	rjmp	.+82     	; 0x4d6 <DIO_GetPinVal+0x98>
				case DIO_PORTC:
				val = Get_Bit(PINC, pin);
     484:	83 b3       	in	r24, 0x13	; 19
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	02 c0       	rjmp	.+4      	; 0x48e <DIO_GetPinVal+0x50>
     48a:	95 95       	asr	r25
     48c:	87 95       	ror	r24
     48e:	da 95       	dec	r29
     490:	e2 f7       	brpl	.-8      	; 0x48a <DIO_GetPinVal+0x4c>
     492:	81 70       	andi	r24, 0x01	; 1
				break;
     494:	20 c0       	rjmp	.+64     	; 0x4d6 <DIO_GetPinVal+0x98>
				case DIO_PORTD:
				val = Get_Bit(PIND, pin);
     496:	80 b3       	in	r24, 0x10	; 16
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	02 c0       	rjmp	.+4      	; 0x4a0 <DIO_GetPinVal+0x62>
     49c:	95 95       	asr	r25
     49e:	87 95       	ror	r24
     4a0:	da 95       	dec	r29
     4a2:	e2 f7       	brpl	.-8      	; 0x49c <DIO_GetPinVal+0x5e>
     4a4:	81 70       	andi	r24, 0x01	; 1
				break;
     4a6:	17 c0       	rjmp	.+46     	; 0x4d6 <DIO_GetPinVal+0x98>
				break;				
			}
		}
		else
		{
			DIO_SetPinDir(port, DIO_ALL_PINs, DIO_PIN_IN);
     4a8:	40 e0       	ldi	r20, 0x00	; 0
     4aa:	68 e0       	ldi	r22, 0x08	; 8
     4ac:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_SetPinDir>
			switch (port)
     4b0:	c1 30       	cpi	r28, 0x01	; 1
     4b2:	41 f0       	breq	.+16     	; 0x4c4 <DIO_GetPinVal+0x86>
     4b4:	28 f0       	brcs	.+10     	; 0x4c0 <DIO_GetPinVal+0x82>
     4b6:	c2 30       	cpi	r28, 0x02	; 2
     4b8:	39 f0       	breq	.+14     	; 0x4c8 <DIO_GetPinVal+0x8a>
     4ba:	c3 30       	cpi	r28, 0x03	; 3
     4bc:	39 f0       	breq	.+14     	; 0x4cc <DIO_GetPinVal+0x8e>
     4be:	0a c0       	rjmp	.+20     	; 0x4d4 <DIO_GetPinVal+0x96>
			{
				case DIO_PORTA:
				val = PINA;
     4c0:	89 b3       	in	r24, 0x19	; 25
				break;
     4c2:	09 c0       	rjmp	.+18     	; 0x4d6 <DIO_GetPinVal+0x98>
				case DIO_PORTB:
				val = PINB;
     4c4:	86 b3       	in	r24, 0x16	; 22
				break;
     4c6:	07 c0       	rjmp	.+14     	; 0x4d6 <DIO_GetPinVal+0x98>
				case DIO_PORTC:
				val = PINC;
     4c8:	83 b3       	in	r24, 0x13	; 19
				break;
     4ca:	05 c0       	rjmp	.+10     	; 0x4d6 <DIO_GetPinVal+0x98>
				case DIO_PORTD:
				val = PIND;
     4cc:	80 b3       	in	r24, 0x10	; 16
				break;
     4ce:	03 c0       	rjmp	.+6      	; 0x4d6 <DIO_GetPinVal+0x98>
		}	
	}
}
Uint8 DIO_GetPinVal(Uint8 port, Uint8 pin)
{
	Uint8 val = 0;
     4d0:	80 e0       	ldi	r24, 0x00	; 0
     4d2:	01 c0       	rjmp	.+2      	; 0x4d6 <DIO_GetPinVal+0x98>
     4d4:	80 e0       	ldi	r24, 0x00	; 0
				default:   //MISRA C rules
				break;				
			}
		}
	return val;
}
     4d6:	df 91       	pop	r29
     4d8:	cf 91       	pop	r28
     4da:	08 95       	ret

000004dc <DIO_SetPullup>:
void DIO_SetPullup(Uint8 port, Uint8 pin)
{
     4dc:	cf 93       	push	r28
     4de:	df 93       	push	r29
     4e0:	c8 2f       	mov	r28, r24
     4e2:	d6 2f       	mov	r29, r22
		if (pin >=0 && pin <=7)
     4e4:	68 30       	cpi	r22, 0x08	; 8
     4e6:	b8 f5       	brcc	.+110    	; 0x556 <DIO_SetPullup+0x7a>
		{
			DIO_SetPinDir(port, pin, DIO_PIN_IN);
     4e8:	40 e0       	ldi	r20, 0x00	; 0
     4ea:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_SetPinDir>
			switch (port)
     4ee:	c1 30       	cpi	r28, 0x01	; 1
     4f0:	89 f0       	breq	.+34     	; 0x514 <DIO_SetPullup+0x38>
     4f2:	28 f0       	brcs	.+10     	; 0x4fe <DIO_SetPullup+0x22>
     4f4:	c2 30       	cpi	r28, 0x02	; 2
     4f6:	c9 f0       	breq	.+50     	; 0x52a <DIO_SetPullup+0x4e>
     4f8:	c3 30       	cpi	r28, 0x03	; 3
     4fa:	11 f1       	breq	.+68     	; 0x540 <DIO_SetPullup+0x64>
     4fc:	43 c0       	rjmp	.+134    	; 0x584 <DIO_SetPullup+0xa8>
			{
				case DIO_PORTA:
				Set_Bit(PORTA, pin);
     4fe:	2b b3       	in	r18, 0x1b	; 27
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	02 c0       	rjmp	.+4      	; 0x50a <DIO_SetPullup+0x2e>
     506:	88 0f       	add	r24, r24
     508:	99 1f       	adc	r25, r25
     50a:	da 95       	dec	r29
     50c:	e2 f7       	brpl	.-8      	; 0x506 <DIO_SetPullup+0x2a>
     50e:	82 2b       	or	r24, r18
     510:	8b bb       	out	0x1b, r24	; 27
				break;
     512:	38 c0       	rjmp	.+112    	; 0x584 <DIO_SetPullup+0xa8>
				case DIO_PORTB:
				Set_Bit(PORTB, pin);
     514:	28 b3       	in	r18, 0x18	; 24
     516:	81 e0       	ldi	r24, 0x01	; 1
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	02 c0       	rjmp	.+4      	; 0x520 <DIO_SetPullup+0x44>
     51c:	88 0f       	add	r24, r24
     51e:	99 1f       	adc	r25, r25
     520:	da 95       	dec	r29
     522:	e2 f7       	brpl	.-8      	; 0x51c <DIO_SetPullup+0x40>
     524:	82 2b       	or	r24, r18
     526:	88 bb       	out	0x18, r24	; 24
				break;
     528:	2d c0       	rjmp	.+90     	; 0x584 <DIO_SetPullup+0xa8>
				case DIO_PORTC:
				Set_Bit(PORTC, pin);
     52a:	25 b3       	in	r18, 0x15	; 21
     52c:	81 e0       	ldi	r24, 0x01	; 1
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	02 c0       	rjmp	.+4      	; 0x536 <DIO_SetPullup+0x5a>
     532:	88 0f       	add	r24, r24
     534:	99 1f       	adc	r25, r25
     536:	da 95       	dec	r29
     538:	e2 f7       	brpl	.-8      	; 0x532 <DIO_SetPullup+0x56>
     53a:	82 2b       	or	r24, r18
     53c:	85 bb       	out	0x15, r24	; 21
				break;
     53e:	22 c0       	rjmp	.+68     	; 0x584 <DIO_SetPullup+0xa8>
				case DIO_PORTD:
				Set_Bit(PORTD, pin);
     540:	22 b3       	in	r18, 0x12	; 18
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	02 c0       	rjmp	.+4      	; 0x54c <DIO_SetPullup+0x70>
     548:	88 0f       	add	r24, r24
     54a:	99 1f       	adc	r25, r25
     54c:	da 95       	dec	r29
     54e:	e2 f7       	brpl	.-8      	; 0x548 <DIO_SetPullup+0x6c>
     550:	82 2b       	or	r24, r18
     552:	82 bb       	out	0x12, r24	; 18
				break;
     554:	17 c0       	rjmp	.+46     	; 0x584 <DIO_SetPullup+0xa8>
				break;
			}
		}
		else
		{
			DIO_SetPinDir(port, DIO_ALL_PINs, DIO_PIN_IN);
     556:	40 e0       	ldi	r20, 0x00	; 0
     558:	68 e0       	ldi	r22, 0x08	; 8
     55a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_SetPinDir>
			switch (port)
     55e:	c1 30       	cpi	r28, 0x01	; 1
     560:	49 f0       	breq	.+18     	; 0x574 <DIO_SetPullup+0x98>
     562:	28 f0       	brcs	.+10     	; 0x56e <DIO_SetPullup+0x92>
     564:	c2 30       	cpi	r28, 0x02	; 2
     566:	49 f0       	breq	.+18     	; 0x57a <DIO_SetPullup+0x9e>
     568:	c3 30       	cpi	r28, 0x03	; 3
     56a:	51 f0       	breq	.+20     	; 0x580 <DIO_SetPullup+0xa4>
     56c:	0b c0       	rjmp	.+22     	; 0x584 <DIO_SetPullup+0xa8>
			{
				case DIO_PORTA:
				PORTA = 0xff;
     56e:	8f ef       	ldi	r24, 0xFF	; 255
     570:	8b bb       	out	0x1b, r24	; 27
				break;
     572:	08 c0       	rjmp	.+16     	; 0x584 <DIO_SetPullup+0xa8>
				case DIO_PORTB:
				PORTB = 0xff;
     574:	8f ef       	ldi	r24, 0xFF	; 255
     576:	88 bb       	out	0x18, r24	; 24
				break;
     578:	05 c0       	rjmp	.+10     	; 0x584 <DIO_SetPullup+0xa8>
				case DIO_PORTC:
				PORTC = 0xff;
     57a:	8f ef       	ldi	r24, 0xFF	; 255
     57c:	85 bb       	out	0x15, r24	; 21
				break;
     57e:	02 c0       	rjmp	.+4      	; 0x584 <DIO_SetPullup+0xa8>
				case DIO_PORTD:
				PORTD = 0xff;
     580:	8f ef       	ldi	r24, 0xFF	; 255
     582:	82 bb       	out	0x12, r24	; 18
				break;
				default:   //MISRA C rules
				break;				
			}
		}	
}
     584:	df 91       	pop	r29
     586:	cf 91       	pop	r28
     588:	08 95       	ret

0000058a <Keypad_INIT>:
				};

void Keypad_INIT(void)
{
	/*column pins direction*/
	DIO_SetPinDir(Keypad_Col_Port, Keypad_Col_0, DIO_PIN_OUT);
     58a:	4f ef       	ldi	r20, 0xFF	; 255
     58c:	63 e0       	ldi	r22, 0x03	; 3
     58e:	82 e0       	ldi	r24, 0x02	; 2
     590:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_SetPinDir>
	DIO_SetPinDir(Keypad_Col_Port, Keypad_Col_1, DIO_PIN_OUT);
     594:	4f ef       	ldi	r20, 0xFF	; 255
     596:	64 e0       	ldi	r22, 0x04	; 4
     598:	82 e0       	ldi	r24, 0x02	; 2
     59a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_SetPinDir>
	DIO_SetPinDir(Keypad_Col_Port, Keypad_Col_2, DIO_PIN_OUT);
     59e:	4f ef       	ldi	r20, 0xFF	; 255
     5a0:	65 e0       	ldi	r22, 0x05	; 5
     5a2:	82 e0       	ldi	r24, 0x02	; 2
     5a4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_SetPinDir>
	DIO_SetPinDir(Keypad_Col_Port, Keypad_Col_3, DIO_PIN_OUT);
     5a8:	4f ef       	ldi	r20, 0xFF	; 255
     5aa:	66 e0       	ldi	r22, 0x06	; 6
     5ac:	82 e0       	ldi	r24, 0x02	; 2
     5ae:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_SetPinDir>
	
	/*row pins direction*/
	DIO_SetPinDir(Keypad_Row_Port, Keypad_Row_0, DIO_PIN_IN);
     5b2:	40 e0       	ldi	r20, 0x00	; 0
     5b4:	64 e0       	ldi	r22, 0x04	; 4
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_SetPinDir>
	DIO_SetPinDir(Keypad_Row_Port, Keypad_Row_1, DIO_PIN_IN);
     5bc:	40 e0       	ldi	r20, 0x00	; 0
     5be:	65 e0       	ldi	r22, 0x05	; 5
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_SetPinDir>
	DIO_SetPinDir(Keypad_Row_Port, Keypad_Row_2, DIO_PIN_IN);
     5c6:	40 e0       	ldi	r20, 0x00	; 0
     5c8:	66 e0       	ldi	r22, 0x06	; 6
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_SetPinDir>
	DIO_SetPinDir(Keypad_Row_Port, Keypad_Row_3, DIO_PIN_IN);
     5d0:	40 e0       	ldi	r20, 0x00	; 0
     5d2:	67 e0       	ldi	r22, 0x07	; 7
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_SetPinDir>
	
	/*column pins value*/
	DIO_SetPinVal(Keypad_Col_Port, Keypad_Col_0, DIO_PIN_ON);
     5da:	4f ef       	ldi	r20, 0xFF	; 255
     5dc:	63 e0       	ldi	r22, 0x03	; 3
     5de:	82 e0       	ldi	r24, 0x02	; 2
     5e0:	0e 94 71 01 	call	0x2e2	; 0x2e2 <DIO_SetPinVal>
	DIO_SetPinVal(Keypad_Col_Port, Keypad_Col_1, DIO_PIN_ON);
     5e4:	4f ef       	ldi	r20, 0xFF	; 255
     5e6:	64 e0       	ldi	r22, 0x04	; 4
     5e8:	82 e0       	ldi	r24, 0x02	; 2
     5ea:	0e 94 71 01 	call	0x2e2	; 0x2e2 <DIO_SetPinVal>
	DIO_SetPinVal(Keypad_Col_Port, Keypad_Col_2, DIO_PIN_ON);
     5ee:	4f ef       	ldi	r20, 0xFF	; 255
     5f0:	65 e0       	ldi	r22, 0x05	; 5
     5f2:	82 e0       	ldi	r24, 0x02	; 2
     5f4:	0e 94 71 01 	call	0x2e2	; 0x2e2 <DIO_SetPinVal>
	DIO_SetPinVal(Keypad_Col_Port, Keypad_Col_3, DIO_PIN_ON);
     5f8:	4f ef       	ldi	r20, 0xFF	; 255
     5fa:	66 e0       	ldi	r22, 0x06	; 6
     5fc:	82 e0       	ldi	r24, 0x02	; 2
     5fe:	0e 94 71 01 	call	0x2e2	; 0x2e2 <DIO_SetPinVal>
	
	/*row pins pull-up setup*/
	DIO_SetPullup(Keypad_Row_Port, Keypad_Row_0);
     602:	64 e0       	ldi	r22, 0x04	; 4
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	0e 94 6e 02 	call	0x4dc	; 0x4dc <DIO_SetPullup>
	DIO_SetPullup(Keypad_Row_Port, Keypad_Row_1);
     60a:	65 e0       	ldi	r22, 0x05	; 5
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	0e 94 6e 02 	call	0x4dc	; 0x4dc <DIO_SetPullup>
	DIO_SetPullup(Keypad_Row_Port, Keypad_Row_2);
     612:	66 e0       	ldi	r22, 0x06	; 6
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	0e 94 6e 02 	call	0x4dc	; 0x4dc <DIO_SetPullup>
	DIO_SetPullup(Keypad_Row_Port, Keypad_Row_3);
     61a:	67 e0       	ldi	r22, 0x07	; 7
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	0e 94 6e 02 	call	0x4dc	; 0x4dc <DIO_SetPullup>
     622:	08 95       	ret

00000624 <Keypad_GetVal>:
}

Uint8 Keypad_GetVal(void)
{
     624:	df 92       	push	r13
     626:	ef 92       	push	r14
     628:	ff 92       	push	r15
     62a:	0f 93       	push	r16
     62c:	1f 93       	push	r17
     62e:	cf 93       	push	r28
     630:	df 93       	push	r29
     632:	0f 2e       	mov	r0, r31
     634:	f0 e6       	ldi	r31, 0x60	; 96
     636:	ef 2e       	mov	r14, r31
     638:	f0 e0       	ldi	r31, 0x00	; 0
     63a:	ff 2e       	mov	r15, r31
     63c:	f0 2d       	mov	r31, r0
	Uint8 i,j, val = 0;
     63e:	d1 2c       	mov	r13, r1
	
	for (i = Keypad_Col_start; i <= Keypad_Col_end; i++)
     640:	d3 e0       	ldi	r29, 0x03	; 3
	{
		DIO_SetPinVal(Keypad_Col_Port, i, DIO_PIN_OFF);
     642:	40 e0       	ldi	r20, 0x00	; 0
     644:	6d 2f       	mov	r22, r29
     646:	82 e0       	ldi	r24, 0x02	; 2
     648:	0e 94 71 01 	call	0x2e2	; 0x2e2 <DIO_SetPinVal>
     64c:	87 01       	movw	r16, r14
		for (j = Keypad_Row_start; j <= Keypad_Row_end; j++)
     64e:	c4 e0       	ldi	r28, 0x04	; 4
		{
			if (DIO_GetPinVal(Keypad_Row_Port, j) == 0)
     650:	6c 2f       	mov	r22, r28
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_GetPinVal>
     658:	81 11       	cpse	r24, r1
     65a:	08 c0       	rjmp	.+16     	; 0x66c <Keypad_GetVal+0x48>
			{
				while(DIO_GetPinVal(Keypad_Row_Port, j) == 0);
     65c:	6c 2f       	mov	r22, r28
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_GetPinVal>
     664:	88 23       	and	r24, r24
     666:	d1 f3       	breq	.-12     	; 0x65c <Keypad_GetVal+0x38>
				val = arr[j - Keypad_Row_start][i - Keypad_Col_start];
     668:	f8 01       	movw	r30, r16
     66a:	d0 80       	ld	r13, Z
	Uint8 i,j, val = 0;
	
	for (i = Keypad_Col_start; i <= Keypad_Col_end; i++)
	{
		DIO_SetPinVal(Keypad_Col_Port, i, DIO_PIN_OFF);
		for (j = Keypad_Row_start; j <= Keypad_Row_end; j++)
     66c:	cf 5f       	subi	r28, 0xFF	; 255
     66e:	0c 5f       	subi	r16, 0xFC	; 252
     670:	1f 4f       	sbci	r17, 0xFF	; 255
     672:	c8 30       	cpi	r28, 0x08	; 8
     674:	69 f7       	brne	.-38     	; 0x650 <Keypad_GetVal+0x2c>
			{
				while(DIO_GetPinVal(Keypad_Row_Port, j) == 0);
				val = arr[j - Keypad_Row_start][i - Keypad_Col_start];
			}
		}
		DIO_SetPinVal(Keypad_Col_Port, i, DIO_PIN_ON);
     676:	4f ef       	ldi	r20, 0xFF	; 255
     678:	6d 2f       	mov	r22, r29
     67a:	82 e0       	ldi	r24, 0x02	; 2
     67c:	0e 94 71 01 	call	0x2e2	; 0x2e2 <DIO_SetPinVal>

Uint8 Keypad_GetVal(void)
{
	Uint8 i,j, val = 0;
	
	for (i = Keypad_Col_start; i <= Keypad_Col_end; i++)
     680:	df 5f       	subi	r29, 0xFF	; 255
     682:	ff ef       	ldi	r31, 0xFF	; 255
     684:	ef 1a       	sub	r14, r31
     686:	ff 0a       	sbc	r15, r31
     688:	d7 30       	cpi	r29, 0x07	; 7
     68a:	d9 f6       	brne	.-74     	; 0x642 <Keypad_GetVal+0x1e>
			}
		}
		DIO_SetPinVal(Keypad_Col_Port, i, DIO_PIN_ON);
	}
	return val;
}
     68c:	8d 2d       	mov	r24, r13
     68e:	df 91       	pop	r29
     690:	cf 91       	pop	r28
     692:	1f 91       	pop	r17
     694:	0f 91       	pop	r16
     696:	ff 90       	pop	r15
     698:	ef 90       	pop	r14
     69a:	df 90       	pop	r13
     69c:	08 95       	ret

0000069e <LCD_WriteCMD>:
	{
		LCD_WriteCHAR(arr[i]);
	}
}
void LCD_ModifyDDRAM_CHAR(Uint8 loc, Uint8 *arr)
{
     69e:	cf 93       	push	r28
     6a0:	c8 2f       	mov	r28, r24
     6a2:	40 e0       	ldi	r20, 0x00	; 0
     6a4:	61 e0       	ldi	r22, 0x01	; 1
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	0e 94 71 01 	call	0x2e2	; 0x2e2 <DIO_SetPinVal>
     6ac:	40 e0       	ldi	r20, 0x00	; 0
     6ae:	62 e0       	ldi	r22, 0x02	; 2
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	0e 94 71 01 	call	0x2e2	; 0x2e2 <DIO_SetPinVal>
     6b6:	40 e0       	ldi	r20, 0x00	; 0
     6b8:	63 e0       	ldi	r22, 0x03	; 3
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	0e 94 71 01 	call	0x2e2	; 0x2e2 <DIO_SetPinVal>
     6c0:	8b b3       	in	r24, 0x1b	; 27
     6c2:	9c 2f       	mov	r25, r28
     6c4:	90 7f       	andi	r25, 0xF0	; 240
     6c6:	8f 70       	andi	r24, 0x0F	; 15
     6c8:	89 2b       	or	r24, r25
     6ca:	8b bb       	out	0x1b, r24	; 27
     6cc:	4f ef       	ldi	r20, 0xFF	; 255
     6ce:	63 e0       	ldi	r22, 0x03	; 3
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	0e 94 71 01 	call	0x2e2	; 0x2e2 <DIO_SetPinVal>
     6d6:	8f e9       	ldi	r24, 0x9F	; 159
     6d8:	9f e0       	ldi	r25, 0x0F	; 15
     6da:	01 97       	sbiw	r24, 0x01	; 1
     6dc:	f1 f7       	brne	.-4      	; 0x6da <LCD_WriteCMD+0x3c>
     6de:	00 c0       	rjmp	.+0      	; 0x6e0 <LCD_WriteCMD+0x42>
     6e0:	00 00       	nop
     6e2:	40 e0       	ldi	r20, 0x00	; 0
     6e4:	63 e0       	ldi	r22, 0x03	; 3
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	0e 94 71 01 	call	0x2e2	; 0x2e2 <DIO_SetPinVal>
     6ec:	2b b3       	in	r18, 0x1b	; 27
     6ee:	30 e1       	ldi	r19, 0x10	; 16
     6f0:	c3 9f       	mul	r28, r19
     6f2:	c0 01       	movw	r24, r0
     6f4:	11 24       	eor	r1, r1
     6f6:	92 2f       	mov	r25, r18
     6f8:	9f 70       	andi	r25, 0x0F	; 15
     6fa:	89 2b       	or	r24, r25
     6fc:	8b bb       	out	0x1b, r24	; 27
     6fe:	4f ef       	ldi	r20, 0xFF	; 255
     700:	63 e0       	ldi	r22, 0x03	; 3
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	0e 94 71 01 	call	0x2e2	; 0x2e2 <DIO_SetPinVal>
     708:	8f e9       	ldi	r24, 0x9F	; 159
     70a:	9f e0       	ldi	r25, 0x0F	; 15
     70c:	01 97       	sbiw	r24, 0x01	; 1
     70e:	f1 f7       	brne	.-4      	; 0x70c <LCD_WriteCMD+0x6e>
     710:	00 c0       	rjmp	.+0      	; 0x712 <LCD_WriteCMD+0x74>
     712:	00 00       	nop
     714:	40 e0       	ldi	r20, 0x00	; 0
     716:	63 e0       	ldi	r22, 0x03	; 3
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <DIO_SetPinVal>
     71e:	8f e1       	ldi	r24, 0x1F	; 31
     720:	9e e4       	ldi	r25, 0x4E	; 78
     722:	01 97       	sbiw	r24, 0x01	; 1
     724:	f1 f7       	brne	.-4      	; 0x722 <LCD_WriteCMD+0x84>
     726:	00 c0       	rjmp	.+0      	; 0x728 <LCD_WriteCMD+0x8a>
     728:	00 00       	nop
     72a:	cf 91       	pop	r28
     72c:	08 95       	ret

0000072e <LCD_INIT>:
     72e:	4f ef       	ldi	r20, 0xFF	; 255
     730:	61 e0       	ldi	r22, 0x01	; 1
     732:	81 e0       	ldi	r24, 0x01	; 1
     734:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_SetPinDir>
     738:	4f ef       	ldi	r20, 0xFF	; 255
     73a:	62 e0       	ldi	r22, 0x02	; 2
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_SetPinDir>
     742:	4f ef       	ldi	r20, 0xFF	; 255
     744:	63 e0       	ldi	r22, 0x03	; 3
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_SetPinDir>
     74c:	4f ef       	ldi	r20, 0xFF	; 255
     74e:	64 e0       	ldi	r22, 0x04	; 4
     750:	80 e0       	ldi	r24, 0x00	; 0
     752:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_SetPinDir>
     756:	4f ef       	ldi	r20, 0xFF	; 255
     758:	65 e0       	ldi	r22, 0x05	; 5
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_SetPinDir>
     760:	4f ef       	ldi	r20, 0xFF	; 255
     762:	66 e0       	ldi	r22, 0x06	; 6
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_SetPinDir>
     76a:	4f ef       	ldi	r20, 0xFF	; 255
     76c:	67 e0       	ldi	r22, 0x07	; 7
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_SetPinDir>
     774:	2f ef       	ldi	r18, 0xFF	; 255
     776:	81 ee       	ldi	r24, 0xE1	; 225
     778:	94 e0       	ldi	r25, 0x04	; 4
     77a:	21 50       	subi	r18, 0x01	; 1
     77c:	80 40       	sbci	r24, 0x00	; 0
     77e:	90 40       	sbci	r25, 0x00	; 0
     780:	e1 f7       	brne	.-8      	; 0x77a <LCD_INIT+0x4c>
     782:	00 c0       	rjmp	.+0      	; 0x784 <LCD_INIT+0x56>
     784:	00 00       	nop
     786:	83 e3       	ldi	r24, 0x33	; 51
     788:	0e 94 4f 03 	call	0x69e	; 0x69e <LCD_WriteCMD>
     78c:	82 e3       	ldi	r24, 0x32	; 50
     78e:	0e 94 4f 03 	call	0x69e	; 0x69e <LCD_WriteCMD>
     792:	88 e2       	ldi	r24, 0x28	; 40
     794:	0e 94 4f 03 	call	0x69e	; 0x69e <LCD_WriteCMD>
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	0e 94 4f 03 	call	0x69e	; 0x69e <LCD_WriteCMD>
     79e:	82 e0       	ldi	r24, 0x02	; 2
     7a0:	0e 94 4f 03 	call	0x69e	; 0x69e <LCD_WriteCMD>
     7a4:	86 e0       	ldi	r24, 0x06	; 6
     7a6:	0e 94 4f 03 	call	0x69e	; 0x69e <LCD_WriteCMD>
     7aa:	8c e0       	ldi	r24, 0x0C	; 12
     7ac:	0e 94 4f 03 	call	0x69e	; 0x69e <LCD_WriteCMD>
     7b0:	08 95       	ret

000007b2 <LCD_WriteCHAR>:
     7b2:	cf 93       	push	r28
     7b4:	c8 2f       	mov	r28, r24
     7b6:	4f ef       	ldi	r20, 0xFF	; 255
     7b8:	61 e0       	ldi	r22, 0x01	; 1
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	0e 94 71 01 	call	0x2e2	; 0x2e2 <DIO_SetPinVal>
     7c0:	40 e0       	ldi	r20, 0x00	; 0
     7c2:	62 e0       	ldi	r22, 0x02	; 2
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	0e 94 71 01 	call	0x2e2	; 0x2e2 <DIO_SetPinVal>
     7ca:	40 e0       	ldi	r20, 0x00	; 0
     7cc:	63 e0       	ldi	r22, 0x03	; 3
     7ce:	81 e0       	ldi	r24, 0x01	; 1
     7d0:	0e 94 71 01 	call	0x2e2	; 0x2e2 <DIO_SetPinVal>
     7d4:	8b b3       	in	r24, 0x1b	; 27
     7d6:	9c 2f       	mov	r25, r28
     7d8:	90 7f       	andi	r25, 0xF0	; 240
     7da:	8f 70       	andi	r24, 0x0F	; 15
     7dc:	89 2b       	or	r24, r25
     7de:	8b bb       	out	0x1b, r24	; 27
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	63 e0       	ldi	r22, 0x03	; 3
     7e4:	81 e0       	ldi	r24, 0x01	; 1
     7e6:	0e 94 71 01 	call	0x2e2	; 0x2e2 <DIO_SetPinVal>
     7ea:	8f e9       	ldi	r24, 0x9F	; 159
     7ec:	9f e0       	ldi	r25, 0x0F	; 15
     7ee:	01 97       	sbiw	r24, 0x01	; 1
     7f0:	f1 f7       	brne	.-4      	; 0x7ee <LCD_WriteCHAR+0x3c>
     7f2:	00 c0       	rjmp	.+0      	; 0x7f4 <LCD_WriteCHAR+0x42>
     7f4:	00 00       	nop
     7f6:	40 e0       	ldi	r20, 0x00	; 0
     7f8:	63 e0       	ldi	r22, 0x03	; 3
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	0e 94 71 01 	call	0x2e2	; 0x2e2 <DIO_SetPinVal>
     800:	2b b3       	in	r18, 0x1b	; 27
     802:	30 e1       	ldi	r19, 0x10	; 16
     804:	c3 9f       	mul	r28, r19
     806:	c0 01       	movw	r24, r0
     808:	11 24       	eor	r1, r1
     80a:	92 2f       	mov	r25, r18
     80c:	9f 70       	andi	r25, 0x0F	; 15
     80e:	89 2b       	or	r24, r25
     810:	8b bb       	out	0x1b, r24	; 27
     812:	4f ef       	ldi	r20, 0xFF	; 255
     814:	63 e0       	ldi	r22, 0x03	; 3
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	0e 94 71 01 	call	0x2e2	; 0x2e2 <DIO_SetPinVal>
     81c:	8f e9       	ldi	r24, 0x9F	; 159
     81e:	9f e0       	ldi	r25, 0x0F	; 15
     820:	01 97       	sbiw	r24, 0x01	; 1
     822:	f1 f7       	brne	.-4      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
     824:	00 c0       	rjmp	.+0      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
     826:	00 00       	nop
     828:	40 e0       	ldi	r20, 0x00	; 0
     82a:	63 e0       	ldi	r22, 0x03	; 3
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	0e 94 71 01 	call	0x2e2	; 0x2e2 <DIO_SetPinVal>
     832:	8f e1       	ldi	r24, 0x1F	; 31
     834:	9e e4       	ldi	r25, 0x4E	; 78
     836:	01 97       	sbiw	r24, 0x01	; 1
     838:	f1 f7       	brne	.-4      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
     83a:	00 c0       	rjmp	.+0      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     83c:	00 00       	nop
     83e:	cf 91       	pop	r28
     840:	08 95       	ret

00000842 <LCD_WriteSTRING>:
     842:	0f 93       	push	r16
     844:	1f 93       	push	r17
     846:	cf 93       	push	r28
     848:	fc 01       	movw	r30, r24
     84a:	80 81       	ld	r24, Z
     84c:	88 23       	and	r24, r24
     84e:	59 f0       	breq	.+22     	; 0x866 <__stack+0x7>
     850:	8f 01       	movw	r16, r30
     852:	c0 e0       	ldi	r28, 0x00	; 0
     854:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <LCD_WriteCHAR>
     858:	cf 5f       	subi	r28, 0xFF	; 255
     85a:	f8 01       	movw	r30, r16
     85c:	ec 0f       	add	r30, r28
     85e:	f1 1d       	adc	r31, r1
     860:	80 81       	ld	r24, Z
     862:	81 11       	cpse	r24, r1
     864:	f7 cf       	rjmp	.-18     	; 0x854 <LCD_WriteSTRING+0x12>
     866:	cf 91       	pop	r28
     868:	1f 91       	pop	r17
     86a:	0f 91       	pop	r16
     86c:	08 95       	ret

0000086e <LCD_WriteINTEGER>:
     86e:	2f 92       	push	r2
     870:	3f 92       	push	r3
     872:	4f 92       	push	r4
     874:	5f 92       	push	r5
     876:	6f 92       	push	r6
     878:	7f 92       	push	r7
     87a:	8f 92       	push	r8
     87c:	9f 92       	push	r9
     87e:	af 92       	push	r10
     880:	bf 92       	push	r11
     882:	cf 92       	push	r12
     884:	df 92       	push	r13
     886:	ef 92       	push	r14
     888:	ff 92       	push	r15
     88a:	0f 93       	push	r16
     88c:	1f 93       	push	r17
     88e:	cf 93       	push	r28
     890:	df 93       	push	r29
     892:	00 d0       	rcall	.+0      	; 0x894 <LCD_WriteINTEGER+0x26>
     894:	00 d0       	rcall	.+0      	; 0x896 <LCD_WriteINTEGER+0x28>
     896:	1f 92       	push	r1
     898:	cd b7       	in	r28, 0x3d	; 61
     89a:	de b7       	in	r29, 0x3e	; 62
     89c:	2b 01       	movw	r4, r22
     89e:	3c 01       	movw	r6, r24
     8a0:	67 2b       	or	r22, r23
     8a2:	68 2b       	or	r22, r24
     8a4:	69 2b       	or	r22, r25
     8a6:	21 f4       	brne	.+8      	; 0x8b0 <LCD_WriteINTEGER+0x42>
     8a8:	80 e3       	ldi	r24, 0x30	; 48
     8aa:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <LCD_WriteCHAR>
     8ae:	85 c0       	rjmp	.+266    	; 0x9ba <LCD_WriteINTEGER+0x14c>
     8b0:	81 2c       	mov	r8, r1
     8b2:	91 2c       	mov	r9, r1
     8b4:	54 01       	movw	r10, r8
     8b6:	83 94       	inc	r8
     8b8:	c1 2c       	mov	r12, r1
     8ba:	d1 2c       	mov	r13, r1
     8bc:	76 01       	movw	r14, r12
     8be:	cc 0c       	add	r12, r12
     8c0:	dd 1c       	adc	r13, r13
     8c2:	ee 1c       	adc	r14, r14
     8c4:	ff 1c       	adc	r15, r15
     8c6:	d7 01       	movw	r26, r14
     8c8:	c6 01       	movw	r24, r12
     8ca:	88 0f       	add	r24, r24
     8cc:	99 1f       	adc	r25, r25
     8ce:	aa 1f       	adc	r26, r26
     8d0:	bb 1f       	adc	r27, r27
     8d2:	88 0f       	add	r24, r24
     8d4:	99 1f       	adc	r25, r25
     8d6:	aa 1f       	adc	r26, r26
     8d8:	bb 1f       	adc	r27, r27
     8da:	c8 0e       	add	r12, r24
     8dc:	d9 1e       	adc	r13, r25
     8de:	ea 1e       	adc	r14, r26
     8e0:	fb 1e       	adc	r15, r27
     8e2:	c3 01       	movw	r24, r6
     8e4:	b2 01       	movw	r22, r4
     8e6:	2a e0       	ldi	r18, 0x0A	; 10
     8e8:	30 e0       	ldi	r19, 0x00	; 0
     8ea:	40 e0       	ldi	r20, 0x00	; 0
     8ec:	50 e0       	ldi	r21, 0x00	; 0
     8ee:	0e 94 be 07 	call	0xf7c	; 0xf7c <__udivmodsi4>
     8f2:	c6 0e       	add	r12, r22
     8f4:	d7 1e       	adc	r13, r23
     8f6:	e8 1e       	adc	r14, r24
     8f8:	f9 1e       	adc	r15, r25
     8fa:	c1 14       	cp	r12, r1
     8fc:	d1 04       	cpc	r13, r1
     8fe:	e1 04       	cpc	r14, r1
     900:	f1 04       	cpc	r15, r1
     902:	91 f4       	brne	.+36     	; 0x928 <LCD_WriteINTEGER+0xba>
     904:	88 0c       	add	r8, r8
     906:	99 1c       	adc	r9, r9
     908:	aa 1c       	adc	r10, r10
     90a:	bb 1c       	adc	r11, r11
     90c:	d5 01       	movw	r26, r10
     90e:	c4 01       	movw	r24, r8
     910:	88 0f       	add	r24, r24
     912:	99 1f       	adc	r25, r25
     914:	aa 1f       	adc	r26, r26
     916:	bb 1f       	adc	r27, r27
     918:	88 0f       	add	r24, r24
     91a:	99 1f       	adc	r25, r25
     91c:	aa 1f       	adc	r26, r26
     91e:	bb 1f       	adc	r27, r27
     920:	88 0e       	add	r8, r24
     922:	99 1e       	adc	r9, r25
     924:	aa 1e       	adc	r10, r26
     926:	bb 1e       	adc	r11, r27
     928:	c3 01       	movw	r24, r6
     92a:	b2 01       	movw	r22, r4
     92c:	2a e0       	ldi	r18, 0x0A	; 10
     92e:	30 e0       	ldi	r19, 0x00	; 0
     930:	40 e0       	ldi	r20, 0x00	; 0
     932:	50 e0       	ldi	r21, 0x00	; 0
     934:	0e 94 be 07 	call	0xf7c	; 0xf7c <__udivmodsi4>
     938:	29 01       	movw	r4, r18
     93a:	3a 01       	movw	r6, r20
     93c:	23 2b       	or	r18, r19
     93e:	24 2b       	or	r18, r20
     940:	25 2b       	or	r18, r21
     942:	09 f0       	breq	.+2      	; 0x946 <LCD_WriteINTEGER+0xd8>
     944:	bc cf       	rjmp	.-136    	; 0x8be <LCD_WriteINTEGER+0x50>
     946:	c1 14       	cp	r12, r1
     948:	d1 04       	cpc	r13, r1
     94a:	e1 04       	cpc	r14, r1
     94c:	f1 04       	cpc	r15, r1
     94e:	a9 f1       	breq	.+106    	; 0x9ba <LCD_WriteINTEGER+0x14c>
     950:	41 2c       	mov	r4, r1
     952:	51 2c       	mov	r5, r1
     954:	32 01       	movw	r6, r4
     956:	28 2c       	mov	r2, r8
     958:	99 82       	std	Y+1, r9	; 0x01
     95a:	aa 82       	std	Y+2, r10	; 0x02
     95c:	bb 82       	std	Y+3, r11	; 0x03
     95e:	31 2c       	mov	r3, r1
     960:	c7 01       	movw	r24, r14
     962:	b6 01       	movw	r22, r12
     964:	2a e0       	ldi	r18, 0x0A	; 10
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	40 e0       	ldi	r20, 0x00	; 0
     96a:	50 e0       	ldi	r21, 0x00	; 0
     96c:	0e 94 be 07 	call	0xf7c	; 0xf7c <__udivmodsi4>
     970:	02 2f       	mov	r16, r18
     972:	13 2f       	mov	r17, r19
     974:	4d 83       	std	Y+5, r20	; 0x05
     976:	5c 83       	std	Y+4, r21	; 0x04
     978:	80 e3       	ldi	r24, 0x30	; 48
     97a:	86 0f       	add	r24, r22
     97c:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <LCD_WriteCHAR>
     980:	c0 2e       	mov	r12, r16
     982:	d1 2e       	mov	r13, r17
     984:	ed 80       	ldd	r14, Y+5	; 0x05
     986:	fc 80       	ldd	r15, Y+4	; 0x04
     988:	c1 14       	cp	r12, r1
     98a:	d1 04       	cpc	r13, r1
     98c:	e1 04       	cpc	r14, r1
     98e:	f1 04       	cpc	r15, r1
     990:	79 f4       	brne	.+30     	; 0x9b0 <LCD_WriteINTEGER+0x142>
     992:	8a e0       	ldi	r24, 0x0A	; 10
     994:	88 16       	cp	r8, r24
     996:	91 04       	cpc	r9, r1
     998:	a1 04       	cpc	r10, r1
     99a:	b1 04       	cpc	r11, r1
     99c:	48 f0       	brcs	.+18     	; 0x9b0 <LCD_WriteINTEGER+0x142>
     99e:	c2 2c       	mov	r12, r2
     9a0:	d9 80       	ldd	r13, Y+1	; 0x01
     9a2:	ea 80       	ldd	r14, Y+2	; 0x02
     9a4:	fb 80       	ldd	r15, Y+3	; 0x03
     9a6:	44 24       	eor	r4, r4
     9a8:	43 94       	inc	r4
     9aa:	51 2c       	mov	r5, r1
     9ac:	61 2c       	mov	r6, r1
     9ae:	73 2c       	mov	r7, r3
     9b0:	4c 14       	cp	r4, r12
     9b2:	5d 04       	cpc	r5, r13
     9b4:	6e 04       	cpc	r6, r14
     9b6:	7f 04       	cpc	r7, r15
     9b8:	99 f6       	brne	.-90     	; 0x960 <LCD_WriteINTEGER+0xf2>
     9ba:	0f 90       	pop	r0
     9bc:	0f 90       	pop	r0
     9be:	0f 90       	pop	r0
     9c0:	0f 90       	pop	r0
     9c2:	0f 90       	pop	r0
     9c4:	df 91       	pop	r29
     9c6:	cf 91       	pop	r28
     9c8:	1f 91       	pop	r17
     9ca:	0f 91       	pop	r16
     9cc:	ff 90       	pop	r15
     9ce:	ef 90       	pop	r14
     9d0:	df 90       	pop	r13
     9d2:	cf 90       	pop	r12
     9d4:	bf 90       	pop	r11
     9d6:	af 90       	pop	r10
     9d8:	9f 90       	pop	r9
     9da:	8f 90       	pop	r8
     9dc:	7f 90       	pop	r7
     9de:	6f 90       	pop	r6
     9e0:	5f 90       	pop	r5
     9e2:	4f 90       	pop	r4
     9e4:	3f 90       	pop	r3
     9e6:	2f 90       	pop	r2
     9e8:	08 95       	ret

000009ea <LCD_GoTo>:
	int i;
	
}
void LCD_GoTo(Uint8 row, Uint8 col)
{
     9ea:	cf 93       	push	r28
     9ec:	df 93       	push	r29
     9ee:	00 d0       	rcall	.+0      	; 0x9f0 <LCD_GoTo+0x6>
     9f0:	cd b7       	in	r28, 0x3d	; 61
     9f2:	de b7       	in	r29, 0x3e	; 62
	Uint8 arr[2] = {Cursor_Begin_1st_Line, Cursor_Begin_2st_Line};
     9f4:	90 e8       	ldi	r25, 0x80	; 128
     9f6:	99 83       	std	Y+1, r25	; 0x01
     9f8:	90 ec       	ldi	r25, 0xC0	; 192
     9fa:	9a 83       	std	Y+2, r25	; 0x02
	LCD_WriteCMD(arr[row] + col);
     9fc:	fe 01       	movw	r30, r28
     9fe:	e8 0f       	add	r30, r24
     a00:	f1 1d       	adc	r31, r1
     a02:	81 81       	ldd	r24, Z+1	; 0x01
     a04:	86 0f       	add	r24, r22
     a06:	0e 94 4f 03 	call	0x69e	; 0x69e <LCD_WriteCMD>
}
     a0a:	0f 90       	pop	r0
     a0c:	0f 90       	pop	r0
     a0e:	df 91       	pop	r29
     a10:	cf 91       	pop	r28
     a12:	08 95       	ret

00000a14 <main>:

int main(void)
{
	

LCD_INIT();
     a14:	0e 94 97 03 	call	0x72e	; 0x72e <LCD_INIT>
Keypad_INIT();
     a18:	0e 94 c5 02 	call	0x58a	; 0x58a <Keypad_INIT>
LIGHT_INIT();
     a1c:	0e 94 66 00 	call	0xcc	; 0xcc <LIGHT_INIT>
Servo_Init();
     a20:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <Servo_Init>

ADC_INIT();
     a24:	0e 94 49 00 	call	0x92	; 0x92 <ADC_INIT>
	
DIO_SetPinDir(DIO_PORTA, RELAY_PIN, DIO_PIN_OUT);
     a28:	4f ef       	ldi	r20, 0xFF	; 255
     a2a:	62 e0       	ldi	r22, 0x02	; 2
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_SetPinDir>
DIO_SetPinDir(DIO_PORTA, 0, DIO_PIN_IN);
     a32:	40 e0       	ldi	r20, 0x00	; 0
     a34:	60 e0       	ldi	r22, 0x00	; 0
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_SetPinDir>
DIO_SetPinDir(DIO_PORTA, DIO_PIN_3, DIO_PIN_OUT);
     a3c:	4f ef       	ldi	r20, 0xFF	; 255
     a3e:	63 e0       	ldi	r22, 0x03	; 3
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_SetPinDir>

	
	Uint8 key=0;
	Sint8 PAGE =control_panel;
     a46:	c4 e3       	ldi	r28, 0x34	; 52
	LCD_GoTo(0,13);
	LCD_WriteCHAR('T');
	LCD_GoTo(0,14);
	LCD_WriteINTEGER(Sensor_read);
	if(Sensor_read > 18){
		 HighTempErrorFlag = ON;
     a48:	0f ef       	ldi	r16, 0xFF	; 255
     a4a:	d0 2f       	mov	r29, r16
	

	
    while (1)    {
 	 
	 key = Keypad_GetVal();
     a4c:	0e 94 12 03 	call	0x624	; 0x624 <Keypad_GetVal>
     a50:	18 2f       	mov	r17, r24
	 
	 Sensor_read = TEMP_READ();
     a52:	0e 94 94 00 	call	0x128	; 0x128 <TEMP_READ>
     a56:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__data_end>
	LCD_GoTo(0,13);
     a5a:	6d e0       	ldi	r22, 0x0D	; 13
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	0e 94 f5 04 	call	0x9ea	; 0x9ea <LCD_GoTo>
	LCD_WriteCHAR('T');
     a62:	84 e5       	ldi	r24, 0x54	; 84
     a64:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <LCD_WriteCHAR>
	LCD_GoTo(0,14);
     a68:	6e e0       	ldi	r22, 0x0E	; 14
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	0e 94 f5 04 	call	0x9ea	; 0x9ea <LCD_GoTo>
	LCD_WriteINTEGER(Sensor_read);
     a70:	60 91 d8 00 	lds	r22, 0x00D8	; 0x8000d8 <__data_end>
     a74:	70 e0       	ldi	r23, 0x00	; 0
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	0e 94 37 04 	call	0x86e	; 0x86e <LCD_WriteINTEGER>
	if(Sensor_read > 18){
     a7e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__data_end>
     a82:	83 31       	cpi	r24, 0x13	; 19
     a84:	60 f0       	brcs	.+24     	; 0xa9e <main+0x8a>
		 HighTempErrorFlag = ON;
     a86:	d0 93 e3 00 	sts	0x00E3, r29	; 0x8000e3 <HighTempErrorFlag>
		DIO_SetPinVal(DIO_PORTA, DIO_PIN_3, DIO_PIN_ON);
     a8a:	4d 2f       	mov	r20, r29
     a8c:	63 e0       	ldi	r22, 0x03	; 3
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	0e 94 71 01 	call	0x2e2	; 0x2e2 <DIO_SetPinVal>
		DIO_SetPinVal(DIO_PORTA, RELAY_PIN, DIO_PIN_ON);
     a94:	4d 2f       	mov	r20, r29
     a96:	62 e0       	ldi	r22, 0x02	; 2
     a98:	80 e0       	ldi	r24, 0x00	; 0
     a9a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <DIO_SetPinVal>
	}
	if(Sensor_read < 16 &&  HighTempErrorFlag ){ 
     a9e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__data_end>
     aa2:	80 31       	cpi	r24, 0x10	; 16
     aa4:	80 f4       	brcc	.+32     	; 0xac6 <main+0xb2>
     aa6:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <HighTempErrorFlag>
     aaa:	88 23       	and	r24, r24
     aac:	61 f0       	breq	.+24     	; 0xac6 <main+0xb2>
		
		DIO_SetPinVal(DIO_PORTA, DIO_PIN_3, DIO_PIN_OFF);
     aae:	40 e0       	ldi	r20, 0x00	; 0
     ab0:	63 e0       	ldi	r22, 0x03	; 3
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	0e 94 71 01 	call	0x2e2	; 0x2e2 <DIO_SetPinVal>
		DIO_SetPinVal(DIO_PORTA, RELAY_PIN, DIO_PIN_OFF);
     ab8:	40 e0       	ldi	r20, 0x00	; 0
     aba:	62 e0       	ldi	r22, 0x02	; 2
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	0e 94 71 01 	call	0x2e2	; 0x2e2 <DIO_SetPinVal>

		 HighTempErrorFlag = OFF;
     ac2:	10 92 e3 00 	sts	0x00E3, r1	; 0x8000e3 <HighTempErrorFlag>
 
		
		 }

	switch(PAGE){
     ac6:	c2 33       	cpi	r28, 0x32	; 50
     ac8:	09 f4       	brne	.+2      	; 0xacc <main+0xb8>
     aca:	42 c0       	rjmp	.+132    	; 0xb50 <main+0x13c>
     acc:	1c f4       	brge	.+6      	; 0xad4 <main+0xc0>
     ace:	c1 33       	cpi	r28, 0x31	; 49
     ad0:	f1 f0       	breq	.+60     	; 0xb0e <main+0xfa>
     ad2:	bc cf       	rjmp	.-136    	; 0xa4c <main+0x38>
     ad4:	c3 33       	cpi	r28, 0x33	; 51
     ad6:	09 f4       	brne	.+2      	; 0xada <main+0xc6>
     ad8:	5c c0       	rjmp	.+184    	; 0xb92 <main+0x17e>
     ada:	c4 33       	cpi	r28, 0x34	; 52
     adc:	09 f0       	breq	.+2      	; 0xae0 <main+0xcc>
     ade:	b6 cf       	rjmp	.-148    	; 0xa4c <main+0x38>
		
		case control_panel :
			LCD_GoTo(0,0);
     ae0:	60 e0       	ldi	r22, 0x00	; 0
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	0e 94 f5 04 	call	0x9ea	; 0x9ea <LCD_GoTo>
			LCD_WriteSTRING("CONTROL PAGE");
     ae8:	8c e7       	ldi	r24, 0x7C	; 124
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	0e 94 21 04 	call	0x842	; 0x842 <LCD_WriteSTRING>
			LCD_GoTo(1,0);
     af0:	60 e0       	ldi	r22, 0x00	; 0
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	0e 94 f5 04 	call	0x9ea	; 0x9ea <LCD_GoTo>
			LCD_WriteSTRING("AC:1 DOOR:2 L:3 ");
     af8:	89 e8       	ldi	r24, 0x89	; 137
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	0e 94 21 04 	call	0x842	; 0x842 <LCD_WriteSTRING>
			 if(key=='1'|| key=='2'||key=='3' ) {PAGE = key;}
     b00:	8f ec       	ldi	r24, 0xCF	; 207
     b02:	81 0f       	add	r24, r17
     b04:	83 30       	cpi	r24, 0x03	; 3
     b06:	08 f0       	brcs	.+2      	; 0xb0a <main+0xf6>
     b08:	a1 cf       	rjmp	.-190    	; 0xa4c <main+0x38>
     b0a:	c1 2f       	mov	r28, r17
     b0c:	9f cf       	rjmp	.-194    	; 0xa4c <main+0x38>
						 															
  		break;
		
		case AC_page :{
			LCD_GoTo(0,0);
     b0e:	60 e0       	ldi	r22, 0x00	; 0
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	0e 94 f5 04 	call	0x9ea	; 0x9ea <LCD_GoTo>
			LCD_WriteSTRING("AIR CONDITION");
     b16:	8a e9       	ldi	r24, 0x9A	; 154
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	0e 94 21 04 	call	0x842	; 0x842 <LCD_WriteSTRING>
			LCD_GoTo(1,0);
     b1e:	60 e0       	ldi	r22, 0x00	; 0
     b20:	81 e0       	ldi	r24, 0x01	; 1
     b22:	0e 94 f5 04 	call	0x9ea	; 0x9ea <LCD_GoTo>
			LCD_WriteSTRING(" STRT STP BK:F4 ");
     b26:	88 ea       	ldi	r24, 0xA8	; 168
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	0e 94 21 04 	call	0x842	; 0x842 <LCD_WriteSTRING>
			 	switch(key)
     b2e:	1f 34       	cpi	r17, 0x4F	; 79
     b30:	59 f0       	breq	.+22     	; 0xb48 <main+0x134>
     b32:	12 35       	cpi	r17, 0x52	; 82
     b34:	29 f0       	breq	.+10     	; 0xb40 <main+0x12c>
     b36:	19 34       	cpi	r17, 0x49	; 73
     b38:	09 f0       	breq	.+2      	; 0xb3c <main+0x128>
     b3a:	88 cf       	rjmp	.-240    	; 0xa4c <main+0x38>
			 	{
				 	case START : {  RELAY(ON);  break;}
				 	case STOP : {  RELAY(OFF); break;}
				 	case BK : {  PAGE=control_panel; break;}
     b3c:	c4 e3       	ldi	r28, 0x34	; 52
     b3e:	86 cf       	rjmp	.-244    	; 0xa4c <main+0x38>
			LCD_WriteSTRING("AIR CONDITION");
			LCD_GoTo(1,0);
			LCD_WriteSTRING(" STRT STP BK:F4 ");
			 	switch(key)
			 	{
				 	case START : {  RELAY(ON);  break;}
     b40:	80 2f       	mov	r24, r16
     b42:	0e 94 60 00 	call	0xc0	; 0xc0 <RELAY>
     b46:	82 cf       	rjmp	.-252    	; 0xa4c <main+0x38>
				 	case STOP : {  RELAY(OFF); break;}
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	0e 94 60 00 	call	0xc0	; 0xc0 <RELAY>
     b4e:	7e cf       	rjmp	.-260    	; 0xa4c <main+0x38>
			break;
			}
		
		
		case door_page	  :{
			LCD_GoTo(0,0);
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	0e 94 f5 04 	call	0x9ea	; 0x9ea <LCD_GoTo>
			LCD_WriteSTRING(" DOOR CONTROL ");
     b58:	89 eb       	ldi	r24, 0xB9	; 185
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	0e 94 21 04 	call	0x842	; 0x842 <LCD_WriteSTRING>
			LCD_GoTo(1,0);
     b60:	60 e0       	ldi	r22, 0x00	; 0
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	0e 94 f5 04 	call	0x9ea	; 0x9ea <LCD_GoTo>
			LCD_WriteSTRING(" STRT STP BK:F4 ");
     b68:	88 ea       	ldi	r24, 0xA8	; 168
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	0e 94 21 04 	call	0x842	; 0x842 <LCD_WriteSTRING>
		
			switch(key)
     b70:	1f 34       	cpi	r17, 0x4F	; 79
     b72:	59 f0       	breq	.+22     	; 0xb8a <main+0x176>
     b74:	12 35       	cpi	r17, 0x52	; 82
     b76:	29 f0       	breq	.+10     	; 0xb82 <main+0x16e>
     b78:	19 34       	cpi	r17, 0x49	; 73
     b7a:	09 f0       	breq	.+2      	; 0xb7e <main+0x16a>
     b7c:	67 cf       	rjmp	.-306    	; 0xa4c <main+0x38>
			{
				case START : {  DOOR(OPN);  break;}
				case STOP : {  DOOR(CLS); break;}
				case BK : {  PAGE=control_panel; break;}
     b7e:	c4 e3       	ldi	r28, 0x34	; 52
     b80:	65 cf       	rjmp	.-310    	; 0xa4c <main+0x38>
			LCD_GoTo(1,0);
			LCD_WriteSTRING(" STRT STP BK:F4 ");
		
			switch(key)
			{
				case START : {  DOOR(OPN);  break;}
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	0e 94 89 00 	call	0x112	; 0x112 <DOOR>
     b88:	61 cf       	rjmp	.-318    	; 0xa4c <main+0x38>
				case STOP : {  DOOR(CLS); break;}
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	0e 94 89 00 	call	0x112	; 0x112 <DOOR>
     b90:	5d cf       	rjmp	.-326    	; 0xa4c <main+0x38>
		break;
		   }
		
		
		case led_page     :{
			LCD_GoTo(0,0);
     b92:	60 e0       	ldi	r22, 0x00	; 0
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	0e 94 f5 04 	call	0x9ea	; 0x9ea <LCD_GoTo>
			LCD_WriteSTRING(" LIGHT-CONTROL");
     b9a:	88 ec       	ldi	r24, 0xC8	; 200
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	0e 94 21 04 	call	0x842	; 0x842 <LCD_WriteSTRING>
			LCD_GoTo(1,0);
     ba2:	60 e0       	ldi	r22, 0x00	; 0
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	0e 94 f5 04 	call	0x9ea	; 0x9ea <LCD_GoTo>
			LCD_WriteSTRING(" STRT STP BK:F4 ");
     baa:	88 ea       	ldi	r24, 0xA8	; 168
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	0e 94 21 04 	call	0x842	; 0x842 <LCD_WriteSTRING>
			
			switch(key)
     bb2:	1f 34       	cpi	r17, 0x4F	; 79
     bb4:	59 f0       	breq	.+22     	; 0xbcc <main+0x1b8>
     bb6:	12 35       	cpi	r17, 0x52	; 82
     bb8:	29 f0       	breq	.+10     	; 0xbc4 <main+0x1b0>
     bba:	19 34       	cpi	r17, 0x49	; 73
     bbc:	09 f0       	breq	.+2      	; 0xbc0 <main+0x1ac>
     bbe:	46 cf       	rjmp	.-372    	; 0xa4c <main+0x38>
			{
				case START : {  LIGHT(ON);  break;}
				case STOP : {  LIGHT(OFF); break;}
				case BK : {  PAGE=control_panel; break;}
     bc0:	c4 e3       	ldi	r28, 0x34	; 52
     bc2:	44 cf       	rjmp	.-376    	; 0xa4c <main+0x38>
			LCD_GoTo(1,0);
			LCD_WriteSTRING(" STRT STP BK:F4 ");
			
			switch(key)
			{
				case START : {  LIGHT(ON);  break;}
     bc4:	80 2f       	mov	r24, r16
     bc6:	0e 94 76 00 	call	0xec	; 0xec <LIGHT>
     bca:	40 cf       	rjmp	.-384    	; 0xa4c <main+0x38>
				case STOP : {  LIGHT(OFF); break;}
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	0e 94 76 00 	call	0xec	; 0xec <LIGHT>
     bd2:	3c cf       	rjmp	.-392    	; 0xa4c <main+0x38>

00000bd4 <Servo_Init>:
#include "SERVO.h"

void Servo_Init()
{
	
	DDRD |= (1<<5);	
     bd4:	8d 9a       	sbi	0x11, 5	; 17

	TCNT1 = 0;		
     bd6:	1d bc       	out	0x2d, r1	; 45
     bd8:	1c bc       	out	0x2c, r1	; 44
	ICR1H =0x13;	
     bda:	83 e1       	ldi	r24, 0x13	; 19
     bdc:	87 bd       	out	0x27, r24	; 39
	ICR1L =0x87;
     bde:	87 e8       	ldi	r24, 0x87	; 135
     be0:	86 bd       	out	0x26, r24	; 38


	
	TCCR1A = (1<<WGM11) | (1<<COM1A1);
     be2:	82 e8       	ldi	r24, 0x82	; 130
     be4:	8f bd       	out	0x2f, r24	; 47


	TCCR1B = (1<<WGM12) | (1<<WGM13) | (1<<CS10) | (1<<CS11);
     be6:	8b e1       	ldi	r24, 0x1B	; 27
     be8:	8e bd       	out	0x2e, r24	; 46
     bea:	08 95       	ret

00000bec <Servo>:
}

void Servo(Uint8 value){

OCR1A = (value * 251 /90 +248); /* Set the compare value */
     bec:	2b ef       	ldi	r18, 0xFB	; 251
     bee:	82 9f       	mul	r24, r18
     bf0:	c0 01       	movw	r24, r0
     bf2:	11 24       	eor	r1, r1
     bf4:	6a e5       	ldi	r22, 0x5A	; 90
     bf6:	70 e0       	ldi	r23, 0x00	; 0
     bf8:	0e 94 aa 07 	call	0xf54	; 0xf54 <__divmodhi4>
     bfc:	68 50       	subi	r22, 0x08	; 8
     bfe:	7f 4f       	sbci	r23, 0xFF	; 255
     c00:	7b bd       	out	0x2b, r23	; 43
     c02:	6a bd       	out	0x2a, r22	; 42
     c04:	08 95       	ret

00000c06 <__vector_10>:
			OCR2 = T2_Init_val;
		}
	}
	#endif

}
     c06:	1f 92       	push	r1
     c08:	0f 92       	push	r0
     c0a:	0f b6       	in	r0, 0x3f	; 63
     c0c:	0f 92       	push	r0
     c0e:	11 24       	eor	r1, r1
     c10:	4f 93       	push	r20
     c12:	5f 93       	push	r21
     c14:	6f 93       	push	r22
     c16:	7f 93       	push	r23
     c18:	8f 93       	push	r24
     c1a:	9f 93       	push	r25
     c1c:	af 93       	push	r26
     c1e:	bf 93       	push	r27
     c20:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <count_0.1720>
     c24:	90 91 e2 00 	lds	r25, 0x00E2	; 0x8000e2 <count_0.1720+0x1>
     c28:	01 96       	adiw	r24, 0x01	; 1
     c2a:	90 93 e2 00 	sts	0x00E2, r25	; 0x8000e2 <count_0.1720+0x1>
     c2e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <count_0.1720>
     c32:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <T0_OVF_No>
     c36:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <T0_OVF_No+0x1>
     c3a:	60 91 7a 00 	lds	r22, 0x007A	; 0x80007a <T0_OVF_No+0x2>
     c3e:	70 91 7b 00 	lds	r23, 0x007B	; 0x80007b <T0_OVF_No+0x3>
     c42:	41 30       	cpi	r20, 0x01	; 1
     c44:	51 05       	cpc	r21, r1
     c46:	61 05       	cpc	r22, r1
     c48:	71 05       	cpc	r23, r1
     c4a:	51 f4       	brne	.+20     	; 0xc60 <__vector_10+0x5a>
     c4c:	01 97       	sbiw	r24, 0x01	; 1
     c4e:	f9 f4       	brne	.+62     	; 0xc8e <__vector_10+0x88>
     c50:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <count_0.1720+0x1>
     c54:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <count_0.1720>
     c58:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <T0_Init_val>
     c5c:	8c bf       	out	0x3c, r24	; 60
     c5e:	17 c0       	rjmp	.+46     	; 0xc8e <__vector_10+0x88>
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	91 05       	cpc	r25, r1
     c64:	21 f4       	brne	.+8      	; 0xc6e <__vector_10+0x68>
     c66:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <T0_Init_val_OVF>
     c6a:	8c bf       	out	0x3c, r24	; 60
     c6c:	10 c0       	rjmp	.+32     	; 0xc8e <__vector_10+0x88>
     c6e:	09 2e       	mov	r0, r25
     c70:	00 0c       	add	r0, r0
     c72:	aa 0b       	sbc	r26, r26
     c74:	bb 0b       	sbc	r27, r27
     c76:	48 17       	cp	r20, r24
     c78:	59 07       	cpc	r21, r25
     c7a:	6a 07       	cpc	r22, r26
     c7c:	7b 07       	cpc	r23, r27
     c7e:	39 f4       	brne	.+14     	; 0xc8e <__vector_10+0x88>
     c80:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <count_0.1720+0x1>
     c84:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <count_0.1720>
     c88:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <T0_Init_val>
     c8c:	8c bf       	out	0x3c, r24	; 60
     c8e:	bf 91       	pop	r27
     c90:	af 91       	pop	r26
     c92:	9f 91       	pop	r25
     c94:	8f 91       	pop	r24
     c96:	7f 91       	pop	r23
     c98:	6f 91       	pop	r22
     c9a:	5f 91       	pop	r21
     c9c:	4f 91       	pop	r20
     c9e:	0f 90       	pop	r0
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	0f 90       	pop	r0
     ca4:	1f 90       	pop	r1
     ca6:	18 95       	reti

00000ca8 <__vector_9>:
     ca8:	1f 92       	push	r1
     caa:	0f 92       	push	r0
     cac:	0f b6       	in	r0, 0x3f	; 63
     cae:	0f 92       	push	r0
     cb0:	11 24       	eor	r1, r1
     cb2:	4f 93       	push	r20
     cb4:	5f 93       	push	r21
     cb6:	6f 93       	push	r22
     cb8:	7f 93       	push	r23
     cba:	8f 93       	push	r24
     cbc:	9f 93       	push	r25
     cbe:	af 93       	push	r26
     cc0:	bf 93       	push	r27
     cc2:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <count_0.1751>
     cc6:	90 91 e0 00 	lds	r25, 0x00E0	; 0x8000e0 <count_0.1751+0x1>
     cca:	01 96       	adiw	r24, 0x01	; 1
     ccc:	90 93 e0 00 	sts	0x00E0, r25	; 0x8000e0 <count_0.1751+0x1>
     cd0:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <count_0.1751>
     cd4:	40 91 74 00 	lds	r20, 0x0074	; 0x800074 <T1_OVF_No>
     cd8:	50 91 75 00 	lds	r21, 0x0075	; 0x800075 <T1_OVF_No+0x1>
     cdc:	60 91 76 00 	lds	r22, 0x0076	; 0x800076 <T1_OVF_No+0x2>
     ce0:	70 91 77 00 	lds	r23, 0x0077	; 0x800077 <T1_OVF_No+0x3>
     ce4:	41 30       	cpi	r20, 0x01	; 1
     ce6:	51 05       	cpc	r21, r1
     ce8:	61 05       	cpc	r22, r1
     cea:	71 05       	cpc	r23, r1
     cec:	69 f4       	brne	.+26     	; 0xd08 <__vector_9+0x60>
     cee:	01 97       	sbiw	r24, 0x01	; 1
     cf0:	41 f5       	brne	.+80     	; 0xd42 <__vector_9+0x9a>
     cf2:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <count_0.1751+0x1>
     cf6:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <count_0.1751>
     cfa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <T1_Init_val>
     cfe:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <T1_Init_val+0x1>
     d02:	9d bd       	out	0x2d, r25	; 45
     d04:	8c bd       	out	0x2c, r24	; 44
     d06:	1d c0       	rjmp	.+58     	; 0xd42 <__vector_9+0x9a>
     d08:	81 30       	cpi	r24, 0x01	; 1
     d0a:	91 05       	cpc	r25, r1
     d0c:	39 f4       	brne	.+14     	; 0xd1c <__vector_9+0x74>
     d0e:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <T1_Init_val_OVF>
     d12:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <T1_Init_val_OVF+0x1>
     d16:	9d bd       	out	0x2d, r25	; 45
     d18:	8c bd       	out	0x2c, r24	; 44
     d1a:	13 c0       	rjmp	.+38     	; 0xd42 <__vector_9+0x9a>
     d1c:	09 2e       	mov	r0, r25
     d1e:	00 0c       	add	r0, r0
     d20:	aa 0b       	sbc	r26, r26
     d22:	bb 0b       	sbc	r27, r27
     d24:	48 17       	cp	r20, r24
     d26:	59 07       	cpc	r21, r25
     d28:	6a 07       	cpc	r22, r26
     d2a:	7b 07       	cpc	r23, r27
     d2c:	51 f4       	brne	.+20     	; 0xd42 <__vector_9+0x9a>
     d2e:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <count_0.1751+0x1>
     d32:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <count_0.1751>
     d36:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <T1_Init_val>
     d3a:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <T1_Init_val+0x1>
     d3e:	9d bd       	out	0x2d, r25	; 45
     d40:	8c bd       	out	0x2c, r24	; 44
     d42:	bf 91       	pop	r27
     d44:	af 91       	pop	r26
     d46:	9f 91       	pop	r25
     d48:	8f 91       	pop	r24
     d4a:	7f 91       	pop	r23
     d4c:	6f 91       	pop	r22
     d4e:	5f 91       	pop	r21
     d50:	4f 91       	pop	r20
     d52:	0f 90       	pop	r0
     d54:	0f be       	out	0x3f, r0	; 63
     d56:	0f 90       	pop	r0
     d58:	1f 90       	pop	r1
     d5a:	18 95       	reti

00000d5c <__vector_7>:
     d5c:	1f 92       	push	r1
     d5e:	0f 92       	push	r0
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	0f 92       	push	r0
     d64:	11 24       	eor	r1, r1
     d66:	4f 93       	push	r20
     d68:	5f 93       	push	r21
     d6a:	6f 93       	push	r22
     d6c:	7f 93       	push	r23
     d6e:	8f 93       	push	r24
     d70:	9f 93       	push	r25
     d72:	af 93       	push	r26
     d74:	bf 93       	push	r27
     d76:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <count_0.1757>
     d7a:	90 91 de 00 	lds	r25, 0x00DE	; 0x8000de <count_0.1757+0x1>
     d7e:	01 96       	adiw	r24, 0x01	; 1
     d80:	90 93 de 00 	sts	0x00DE, r25	; 0x8000de <count_0.1757+0x1>
     d84:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <count_0.1757>
     d88:	40 91 74 00 	lds	r20, 0x0074	; 0x800074 <T1_OVF_No>
     d8c:	50 91 75 00 	lds	r21, 0x0075	; 0x800075 <T1_OVF_No+0x1>
     d90:	60 91 76 00 	lds	r22, 0x0076	; 0x800076 <T1_OVF_No+0x2>
     d94:	70 91 77 00 	lds	r23, 0x0077	; 0x800077 <T1_OVF_No+0x3>
     d98:	41 30       	cpi	r20, 0x01	; 1
     d9a:	51 05       	cpc	r21, r1
     d9c:	61 05       	cpc	r22, r1
     d9e:	71 05       	cpc	r23, r1
     da0:	69 f4       	brne	.+26     	; 0xdbc <__vector_7+0x60>
     da2:	01 97       	sbiw	r24, 0x01	; 1
     da4:	41 f5       	brne	.+80     	; 0xdf6 <__vector_7+0x9a>
     da6:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <count_0.1757+0x1>
     daa:	10 92 dd 00 	sts	0x00DD, r1	; 0x8000dd <count_0.1757>
     dae:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <T1_Init_val>
     db2:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <T1_Init_val+0x1>
     db6:	9b bd       	out	0x2b, r25	; 43
     db8:	8a bd       	out	0x2a, r24	; 42
     dba:	1d c0       	rjmp	.+58     	; 0xdf6 <__vector_7+0x9a>
     dbc:	81 30       	cpi	r24, 0x01	; 1
     dbe:	91 05       	cpc	r25, r1
     dc0:	39 f4       	brne	.+14     	; 0xdd0 <__vector_7+0x74>
     dc2:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <T1_Init_val_OVF>
     dc6:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <T1_Init_val_OVF+0x1>
     dca:	9b bd       	out	0x2b, r25	; 43
     dcc:	8a bd       	out	0x2a, r24	; 42
     dce:	13 c0       	rjmp	.+38     	; 0xdf6 <__vector_7+0x9a>
     dd0:	09 2e       	mov	r0, r25
     dd2:	00 0c       	add	r0, r0
     dd4:	aa 0b       	sbc	r26, r26
     dd6:	bb 0b       	sbc	r27, r27
     dd8:	48 17       	cp	r20, r24
     dda:	59 07       	cpc	r21, r25
     ddc:	6a 07       	cpc	r22, r26
     dde:	7b 07       	cpc	r23, r27
     de0:	51 f4       	brne	.+20     	; 0xdf6 <__vector_7+0x9a>
     de2:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <count_0.1757+0x1>
     de6:	10 92 dd 00 	sts	0x00DD, r1	; 0x8000dd <count_0.1757>
     dea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <T1_Init_val>
     dee:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <T1_Init_val+0x1>
     df2:	9b bd       	out	0x2b, r25	; 43
     df4:	8a bd       	out	0x2a, r24	; 42
     df6:	bf 91       	pop	r27
     df8:	af 91       	pop	r26
     dfa:	9f 91       	pop	r25
     dfc:	8f 91       	pop	r24
     dfe:	7f 91       	pop	r23
     e00:	6f 91       	pop	r22
     e02:	5f 91       	pop	r21
     e04:	4f 91       	pop	r20
     e06:	0f 90       	pop	r0
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	0f 90       	pop	r0
     e0c:	1f 90       	pop	r1
     e0e:	18 95       	reti

00000e10 <__vector_5>:
ISR(TIMER2_OVF_vect)
{
     e10:	1f 92       	push	r1
     e12:	0f 92       	push	r0
     e14:	0f b6       	in	r0, 0x3f	; 63
     e16:	0f 92       	push	r0
     e18:	11 24       	eor	r1, r1
     e1a:	4f 93       	push	r20
     e1c:	5f 93       	push	r21
     e1e:	6f 93       	push	r22
     e20:	7f 93       	push	r23
     e22:	8f 93       	push	r24
     e24:	9f 93       	push	r25
     e26:	af 93       	push	r26
     e28:	bf 93       	push	r27
	static int count_0 = 0; //counter to count the number of overflows
	static int count_1 = 0; //counter to count
	count_0++;
     e2a:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <count_0.1783>
     e2e:	90 91 dc 00 	lds	r25, 0x00DC	; 0x8000dc <count_0.1783+0x1>
     e32:	01 96       	adiw	r24, 0x01	; 1
     e34:	90 93 dc 00 	sts	0x00DC, r25	; 0x8000dc <count_0.1783+0x1>
     e38:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <count_0.1783>
	if (T2_OVF_No == 1)
     e3c:	40 91 70 00 	lds	r20, 0x0070	; 0x800070 <T2_OVF_No>
     e40:	50 91 71 00 	lds	r21, 0x0071	; 0x800071 <T2_OVF_No+0x1>
     e44:	60 91 72 00 	lds	r22, 0x0072	; 0x800072 <T2_OVF_No+0x2>
     e48:	70 91 73 00 	lds	r23, 0x0073	; 0x800073 <T2_OVF_No+0x3>
     e4c:	41 30       	cpi	r20, 0x01	; 1
     e4e:	51 05       	cpc	r21, r1
     e50:	61 05       	cpc	r22, r1
     e52:	71 05       	cpc	r23, r1
     e54:	51 f4       	brne	.+20     	; 0xe6a <__vector_5+0x5a>
	{
		if (count_0 == T2_OVF_No)
     e56:	01 97       	sbiw	r24, 0x01	; 1
     e58:	f9 f4       	brne	.+62     	; 0xe98 <__vector_5+0x88>
		{
			//write your code here

			count_0 = 0;
     e5a:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <count_0.1783+0x1>
     e5e:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <count_0.1783>
			TCNT2 = T2_Init_val;
     e62:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <T2_Init_val>
     e66:	84 bd       	out	0x24, r24	; 36
     e68:	17 c0       	rjmp	.+46     	; 0xe98 <__vector_5+0x88>
		}
	}
	else
	{
		if (count_0 == 1)
     e6a:	81 30       	cpi	r24, 0x01	; 1
     e6c:	91 05       	cpc	r25, r1
     e6e:	21 f4       	brne	.+8      	; 0xe78 <__vector_5+0x68>
		{
			TCNT2 = T2_Init_val_OVF;
     e70:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <T2_Init_val_OVF>
     e74:	84 bd       	out	0x24, r24	; 36
     e76:	10 c0       	rjmp	.+32     	; 0xe98 <__vector_5+0x88>
		}
		else if (count_0 == T2_OVF_No)
     e78:	09 2e       	mov	r0, r25
     e7a:	00 0c       	add	r0, r0
     e7c:	aa 0b       	sbc	r26, r26
     e7e:	bb 0b       	sbc	r27, r27
     e80:	48 17       	cp	r20, r24
     e82:	59 07       	cpc	r21, r25
     e84:	6a 07       	cpc	r22, r26
     e86:	7b 07       	cpc	r23, r27
     e88:	39 f4       	brne	.+14     	; 0xe98 <__vector_5+0x88>
		{
			//write your code here

			count_0 = 0;
     e8a:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <count_0.1783+0x1>
     e8e:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <count_0.1783>
			TCNT2 = T2_Init_val;
     e92:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <T2_Init_val>
     e96:	84 bd       	out	0x24, r24	; 36
		}
	}
}
     e98:	bf 91       	pop	r27
     e9a:	af 91       	pop	r26
     e9c:	9f 91       	pop	r25
     e9e:	8f 91       	pop	r24
     ea0:	7f 91       	pop	r23
     ea2:	6f 91       	pop	r22
     ea4:	5f 91       	pop	r21
     ea6:	4f 91       	pop	r20
     ea8:	0f 90       	pop	r0
     eaa:	0f be       	out	0x3f, r0	; 63
     eac:	0f 90       	pop	r0
     eae:	1f 90       	pop	r1
     eb0:	18 95       	reti

00000eb2 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
     eb2:	1f 92       	push	r1
     eb4:	0f 92       	push	r0
     eb6:	0f b6       	in	r0, 0x3f	; 63
     eb8:	0f 92       	push	r0
     eba:	11 24       	eor	r1, r1
     ebc:	4f 93       	push	r20
     ebe:	5f 93       	push	r21
     ec0:	6f 93       	push	r22
     ec2:	7f 93       	push	r23
     ec4:	8f 93       	push	r24
     ec6:	9f 93       	push	r25
     ec8:	af 93       	push	r26
     eca:	bf 93       	push	r27
	static int count_0 = 0; //counter to count the number of overflows
	static int count_1 = 0; //counter to count
	count_0++;
     ecc:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <count_0.1790>
     ed0:	90 91 da 00 	lds	r25, 0x00DA	; 0x8000da <count_0.1790+0x1>
     ed4:	01 96       	adiw	r24, 0x01	; 1
     ed6:	90 93 da 00 	sts	0x00DA, r25	; 0x8000da <count_0.1790+0x1>
     eda:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <count_0.1790>
	if (T2_OVF_No == 1)
     ede:	40 91 70 00 	lds	r20, 0x0070	; 0x800070 <T2_OVF_No>
     ee2:	50 91 71 00 	lds	r21, 0x0071	; 0x800071 <T2_OVF_No+0x1>
     ee6:	60 91 72 00 	lds	r22, 0x0072	; 0x800072 <T2_OVF_No+0x2>
     eea:	70 91 73 00 	lds	r23, 0x0073	; 0x800073 <T2_OVF_No+0x3>
     eee:	41 30       	cpi	r20, 0x01	; 1
     ef0:	51 05       	cpc	r21, r1
     ef2:	61 05       	cpc	r22, r1
     ef4:	71 05       	cpc	r23, r1
     ef6:	51 f4       	brne	.+20     	; 0xf0c <__vector_4+0x5a>
	{
		if (count_0 == T2_OVF_No)
     ef8:	01 97       	sbiw	r24, 0x01	; 1
     efa:	f9 f4       	brne	.+62     	; 0xf3a <__vector_4+0x88>
		{
			//write your code here

			count_0 = 0;
     efc:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <count_0.1790+0x1>
     f00:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <count_0.1790>
			OCR2 = T2_Init_val;
     f04:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <T2_Init_val>
     f08:	83 bd       	out	0x23, r24	; 35
     f0a:	17 c0       	rjmp	.+46     	; 0xf3a <__vector_4+0x88>
		}
	}
	else
	{
		if (count_0 == 1)
     f0c:	81 30       	cpi	r24, 0x01	; 1
     f0e:	91 05       	cpc	r25, r1
     f10:	21 f4       	brne	.+8      	; 0xf1a <__vector_4+0x68>
		{
			OCR2 = T2_Init_val_OVF;
     f12:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <T2_Init_val_OVF>
     f16:	83 bd       	out	0x23, r24	; 35
     f18:	10 c0       	rjmp	.+32     	; 0xf3a <__vector_4+0x88>
		}
		else if (count_0 == T2_OVF_No)
     f1a:	09 2e       	mov	r0, r25
     f1c:	00 0c       	add	r0, r0
     f1e:	aa 0b       	sbc	r26, r26
     f20:	bb 0b       	sbc	r27, r27
     f22:	48 17       	cp	r20, r24
     f24:	59 07       	cpc	r21, r25
     f26:	6a 07       	cpc	r22, r26
     f28:	7b 07       	cpc	r23, r27
     f2a:	39 f4       	brne	.+14     	; 0xf3a <__vector_4+0x88>
		{
			//write your code here

			count_0 = 0;
     f2c:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <count_0.1790+0x1>
     f30:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <count_0.1790>
			OCR2 = T2_Init_val;
     f34:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <T2_Init_val>
     f38:	83 bd       	out	0x23, r24	; 35
		}
	}
     f3a:	bf 91       	pop	r27
     f3c:	af 91       	pop	r26
     f3e:	9f 91       	pop	r25
     f40:	8f 91       	pop	r24
     f42:	7f 91       	pop	r23
     f44:	6f 91       	pop	r22
     f46:	5f 91       	pop	r21
     f48:	4f 91       	pop	r20
     f4a:	0f 90       	pop	r0
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	0f 90       	pop	r0
     f50:	1f 90       	pop	r1
     f52:	18 95       	reti

00000f54 <__divmodhi4>:
     f54:	97 fb       	bst	r25, 7
     f56:	07 2e       	mov	r0, r23
     f58:	16 f4       	brtc	.+4      	; 0xf5e <__divmodhi4+0xa>
     f5a:	00 94       	com	r0
     f5c:	07 d0       	rcall	.+14     	; 0xf6c <__divmodhi4_neg1>
     f5e:	77 fd       	sbrc	r23, 7
     f60:	09 d0       	rcall	.+18     	; 0xf74 <__divmodhi4_neg2>
     f62:	0e 94 ef 07 	call	0xfde	; 0xfde <__udivmodhi4>
     f66:	07 fc       	sbrc	r0, 7
     f68:	05 d0       	rcall	.+10     	; 0xf74 <__divmodhi4_neg2>
     f6a:	3e f4       	brtc	.+14     	; 0xf7a <__divmodhi4_exit>

00000f6c <__divmodhi4_neg1>:
     f6c:	90 95       	com	r25
     f6e:	81 95       	neg	r24
     f70:	9f 4f       	sbci	r25, 0xFF	; 255
     f72:	08 95       	ret

00000f74 <__divmodhi4_neg2>:
     f74:	70 95       	com	r23
     f76:	61 95       	neg	r22
     f78:	7f 4f       	sbci	r23, 0xFF	; 255

00000f7a <__divmodhi4_exit>:
     f7a:	08 95       	ret

00000f7c <__udivmodsi4>:
     f7c:	a1 e2       	ldi	r26, 0x21	; 33
     f7e:	1a 2e       	mov	r1, r26
     f80:	aa 1b       	sub	r26, r26
     f82:	bb 1b       	sub	r27, r27
     f84:	fd 01       	movw	r30, r26
     f86:	0d c0       	rjmp	.+26     	; 0xfa2 <__udivmodsi4_ep>

00000f88 <__udivmodsi4_loop>:
     f88:	aa 1f       	adc	r26, r26
     f8a:	bb 1f       	adc	r27, r27
     f8c:	ee 1f       	adc	r30, r30
     f8e:	ff 1f       	adc	r31, r31
     f90:	a2 17       	cp	r26, r18
     f92:	b3 07       	cpc	r27, r19
     f94:	e4 07       	cpc	r30, r20
     f96:	f5 07       	cpc	r31, r21
     f98:	20 f0       	brcs	.+8      	; 0xfa2 <__udivmodsi4_ep>
     f9a:	a2 1b       	sub	r26, r18
     f9c:	b3 0b       	sbc	r27, r19
     f9e:	e4 0b       	sbc	r30, r20
     fa0:	f5 0b       	sbc	r31, r21

00000fa2 <__udivmodsi4_ep>:
     fa2:	66 1f       	adc	r22, r22
     fa4:	77 1f       	adc	r23, r23
     fa6:	88 1f       	adc	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	1a 94       	dec	r1
     fac:	69 f7       	brne	.-38     	; 0xf88 <__udivmodsi4_loop>
     fae:	60 95       	com	r22
     fb0:	70 95       	com	r23
     fb2:	80 95       	com	r24
     fb4:	90 95       	com	r25
     fb6:	9b 01       	movw	r18, r22
     fb8:	ac 01       	movw	r20, r24
     fba:	bd 01       	movw	r22, r26
     fbc:	cf 01       	movw	r24, r30
     fbe:	08 95       	ret

00000fc0 <__umulhisi3>:
     fc0:	a2 9f       	mul	r26, r18
     fc2:	b0 01       	movw	r22, r0
     fc4:	b3 9f       	mul	r27, r19
     fc6:	c0 01       	movw	r24, r0
     fc8:	a3 9f       	mul	r26, r19
     fca:	70 0d       	add	r23, r0
     fcc:	81 1d       	adc	r24, r1
     fce:	11 24       	eor	r1, r1
     fd0:	91 1d       	adc	r25, r1
     fd2:	b2 9f       	mul	r27, r18
     fd4:	70 0d       	add	r23, r0
     fd6:	81 1d       	adc	r24, r1
     fd8:	11 24       	eor	r1, r1
     fda:	91 1d       	adc	r25, r1
     fdc:	08 95       	ret

00000fde <__udivmodhi4>:
     fde:	aa 1b       	sub	r26, r26
     fe0:	bb 1b       	sub	r27, r27
     fe2:	51 e1       	ldi	r21, 0x11	; 17
     fe4:	07 c0       	rjmp	.+14     	; 0xff4 <__udivmodhi4_ep>

00000fe6 <__udivmodhi4_loop>:
     fe6:	aa 1f       	adc	r26, r26
     fe8:	bb 1f       	adc	r27, r27
     fea:	a6 17       	cp	r26, r22
     fec:	b7 07       	cpc	r27, r23
     fee:	10 f0       	brcs	.+4      	; 0xff4 <__udivmodhi4_ep>
     ff0:	a6 1b       	sub	r26, r22
     ff2:	b7 0b       	sbc	r27, r23

00000ff4 <__udivmodhi4_ep>:
     ff4:	88 1f       	adc	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	5a 95       	dec	r21
     ffa:	a9 f7       	brne	.-22     	; 0xfe6 <__udivmodhi4_loop>
     ffc:	80 95       	com	r24
     ffe:	90 95       	com	r25
    1000:	bc 01       	movw	r22, r24
    1002:	cd 01       	movw	r24, r26
    1004:	08 95       	ret

00001006 <_exit>:
    1006:	f8 94       	cli

00001008 <__stop_program>:
    1008:	ff cf       	rjmp	.-2      	; 0x1008 <__stop_program>
